/*
LeaseWeb API for IP address management

> The base URL for this API is: **https://api.leaseweb.com/ipMgmt/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ips

import (
	"encoding/json"
	"fmt"
)

// ProtocolVersion Protocol version
type ProtocolVersion int32

// List of protocolVersion
const (
	PROTOCOLVERSION__4 ProtocolVersion = 4
	PROTOCOLVERSION__6 ProtocolVersion = 6
)

// All allowed values of ProtocolVersion enum
var AllowedProtocolVersionEnumValues = []ProtocolVersion{
	4,
	6,
}

func (v *ProtocolVersion) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtocolVersion(value)
	for _, existing := range AllowedProtocolVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtocolVersion", value)
}

// NewProtocolVersionFromValue returns a pointer to a valid ProtocolVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolVersionFromValue(v int32) (*ProtocolVersion, error) {
	ev := ProtocolVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolVersion: valid values are %v", v, AllowedProtocolVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolVersion) IsValid() bool {
	for _, existing := range AllowedProtocolVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to protocolVersion value
func (v ProtocolVersion) Ptr() *ProtocolVersion {
	return &v
}

type NullableProtocolVersion struct {
	value *ProtocolVersion
	isSet bool
}

func (v NullableProtocolVersion) Get() *ProtocolVersion {
	return v.value
}

func (v *NullableProtocolVersion) Set(val *ProtocolVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolVersion(val *ProtocolVersion) *NullableProtocolVersion {
	return &NullableProtocolVersion{value: val, isSet: true}
}

func (v NullableProtocolVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

