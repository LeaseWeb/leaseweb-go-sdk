/*
LeaseWeb API for IP address management

> The base URL for this API is: **https://api.leaseweb.com/ipMgmt/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ips

import (
	"encoding/json"
	"time"
)

// checks if the NullRouteIPOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NullRouteIPOpts{}

// NullRouteIPOpts struct for NullRouteIPOpts
type NullRouteIPOpts struct {
	// The date and time when the null route is to be deactivated. The date and time should be specified using the format yyyy-mm-ddThh:mm:ssÂ±hh:mm (with time zone designator) or yyyy-mm-ddThh:mm:ssZ (UTC). If this field is not present then the null route will not be automatically removed.
	AutomatedUnnullingAt *time.Time `json:"automatedUnnullingAt,omitempty"`
	// A comment to be stored with the null route (e.g. null route reason)
	Comment *string `json:"comment,omitempty"`
	// A reference to be stored with the null route
	TicketId *string `json:"ticketId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NullRouteIPOpts NullRouteIPOpts

// NewNullRouteIPOpts instantiates a new NullRouteIPOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullRouteIPOpts() *NullRouteIPOpts {
	this := NullRouteIPOpts{}
	return &this
}

// NewNullRouteIPOptsWithDefaults instantiates a new NullRouteIPOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullRouteIPOptsWithDefaults() *NullRouteIPOpts {
	this := NullRouteIPOpts{}
	return &this
}

// GetAutomatedUnnullingAt returns the AutomatedUnnullingAt field value if set, zero value otherwise.
func (o *NullRouteIPOpts) GetAutomatedUnnullingAt() time.Time {
	if o == nil || IsNil(o.AutomatedUnnullingAt) {
		var ret time.Time
		return ret
	}
	return *o.AutomatedUnnullingAt
}

// GetAutomatedUnnullingAtOk returns a tuple with the AutomatedUnnullingAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullRouteIPOpts) GetAutomatedUnnullingAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AutomatedUnnullingAt) {
		return nil, false
	}
	return o.AutomatedUnnullingAt, true
}

// HasAutomatedUnnullingAt returns a boolean if a field has been set.
func (o *NullRouteIPOpts) HasAutomatedUnnullingAt() bool {
	if o != nil && !IsNil(o.AutomatedUnnullingAt) {
		return true
	}

	return false
}

// SetAutomatedUnnullingAt gets a reference to the given time.Time and assigns it to the AutomatedUnnullingAt field.
func (o *NullRouteIPOpts) SetAutomatedUnnullingAt(v time.Time) {
	o.AutomatedUnnullingAt = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *NullRouteIPOpts) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullRouteIPOpts) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *NullRouteIPOpts) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *NullRouteIPOpts) SetComment(v string) {
	o.Comment = &v
}

// GetTicketId returns the TicketId field value if set, zero value otherwise.
func (o *NullRouteIPOpts) GetTicketId() string {
	if o == nil || IsNil(o.TicketId) {
		var ret string
		return ret
	}
	return *o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullRouteIPOpts) GetTicketIdOk() (*string, bool) {
	if o == nil || IsNil(o.TicketId) {
		return nil, false
	}
	return o.TicketId, true
}

// HasTicketId returns a boolean if a field has been set.
func (o *NullRouteIPOpts) HasTicketId() bool {
	if o != nil && !IsNil(o.TicketId) {
		return true
	}

	return false
}

// SetTicketId gets a reference to the given string and assigns it to the TicketId field.
func (o *NullRouteIPOpts) SetTicketId(v string) {
	o.TicketId = &v
}

func (o NullRouteIPOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NullRouteIPOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutomatedUnnullingAt) {
		toSerialize["automatedUnnullingAt"] = o.AutomatedUnnullingAt
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.TicketId) {
		toSerialize["ticketId"] = o.TicketId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NullRouteIPOpts) UnmarshalJSON(data []byte) (err error) {
	varNullRouteIPOpts := _NullRouteIPOpts{}

	err = json.Unmarshal(data, &varNullRouteIPOpts)

	if err != nil {
		return err
	}

	*o = NullRouteIPOpts(varNullRouteIPOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "automatedUnnullingAt")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "ticketId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNullRouteIPOpts struct {
	value *NullRouteIPOpts
	isSet bool
}

func (v NullableNullRouteIPOpts) Get() *NullRouteIPOpts {
	return v.value
}

func (v *NullableNullRouteIPOpts) Set(val *NullRouteIPOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableNullRouteIPOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableNullRouteIPOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullRouteIPOpts(val *NullRouteIPOpts) *NullableNullRouteIPOpts {
	return &NullableNullRouteIPOpts{value: val, isSet: true}
}

func (v NullableNullRouteIPOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullRouteIPOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


