/*
LeaseWeb API for IP address management

> The base URL for this API is: **https://api.leaseweb.com/ipMgmt/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ips

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateReverseLookupRecordsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateReverseLookupRecordsResult{}

// UpdateReverseLookupRecordsResult struct for UpdateReverseLookupRecordsResult
type UpdateReverseLookupRecordsResult struct {
	ReverseLookups []ReverseLookup `json:"reverseLookups"`
	AdditionalProperties map[string]interface{}
}

type _UpdateReverseLookupRecordsResult UpdateReverseLookupRecordsResult

// NewUpdateReverseLookupRecordsResult instantiates a new UpdateReverseLookupRecordsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateReverseLookupRecordsResult(reverseLookups []ReverseLookup) *UpdateReverseLookupRecordsResult {
	this := UpdateReverseLookupRecordsResult{}
	this.ReverseLookups = reverseLookups
	return &this
}

// NewUpdateReverseLookupRecordsResultWithDefaults instantiates a new UpdateReverseLookupRecordsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateReverseLookupRecordsResultWithDefaults() *UpdateReverseLookupRecordsResult {
	this := UpdateReverseLookupRecordsResult{}
	return &this
}

// GetReverseLookups returns the ReverseLookups field value
func (o *UpdateReverseLookupRecordsResult) GetReverseLookups() []ReverseLookup {
	if o == nil {
		var ret []ReverseLookup
		return ret
	}

	return o.ReverseLookups
}

// GetReverseLookupsOk returns a tuple with the ReverseLookups field value
// and a boolean to check if the value has been set.
func (o *UpdateReverseLookupRecordsResult) GetReverseLookupsOk() ([]ReverseLookup, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReverseLookups, true
}

// SetReverseLookups sets field value
func (o *UpdateReverseLookupRecordsResult) SetReverseLookups(v []ReverseLookup) {
	o.ReverseLookups = v
}

func (o UpdateReverseLookupRecordsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateReverseLookupRecordsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reverseLookups"] = o.ReverseLookups

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateReverseLookupRecordsResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reverseLookups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateReverseLookupRecordsResult := _UpdateReverseLookupRecordsResult{}

	err = json.Unmarshal(data, &varUpdateReverseLookupRecordsResult)

	if err != nil {
		return err
	}

	*o = UpdateReverseLookupRecordsResult(varUpdateReverseLookupRecordsResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reverseLookups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateReverseLookupRecordsResult struct {
	value *UpdateReverseLookupRecordsResult
	isSet bool
}

func (v NullableUpdateReverseLookupRecordsResult) Get() *UpdateReverseLookupRecordsResult {
	return v.value
}

func (v *NullableUpdateReverseLookupRecordsResult) Set(val *UpdateReverseLookupRecordsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateReverseLookupRecordsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateReverseLookupRecordsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateReverseLookupRecordsResult(val *UpdateReverseLookupRecordsResult) *NullableUpdateReverseLookupRecordsResult {
	return &NullableUpdateReverseLookupRecordsResult{value: val, isSet: true}
}

func (v NullableUpdateReverseLookupRecordsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateReverseLookupRecordsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


