/*
LeaseWeb API for IP address management

Testing IpsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ips

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/ips"
)

func Test_ips_IpsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IpsAPIService GetIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ip string

		resp, httpRes, err := apiClient.IpsAPI.GetIP(context.Background(), ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService GetIPList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IpsAPI.GetIPList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService GetNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IpsAPI.GetNullRouteHistory(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService GetNullRouteHistoryList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IpsAPI.GetNullRouteHistoryList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService GetReverseLookupRecordList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ip string

		resp, httpRes, err := apiClient.IpsAPI.GetReverseLookupRecordList(context.Background(), ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService NullRouteIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ip string

		resp, httpRes, err := apiClient.IpsAPI.NullRouteIP(context.Background(), ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService RemoveIPNullRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ip string

		httpRes, err := apiClient.IpsAPI.RemoveIPNullRoute(context.Background(), ip).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService UpdateIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ip string

		resp, httpRes, err := apiClient.IpsAPI.UpdateIP(context.Background(), ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService UpdateNullRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IpsAPI.UpdateNullRoute(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IpsAPIService UpdateReverseLookupRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ip string

		resp, httpRes, err := apiClient.IpsAPI.UpdateReverseLookupRecords(context.Background(), ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
