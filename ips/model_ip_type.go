/*
LeaseWeb API for IP address management

> The base URL for this API is: **https://api.leaseweb.com/ipMgmt/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ips

import (
	"encoding/json"
	"fmt"
)

// IpType the model 'IpType'
type IpType string

// List of ipType
const (
	IPTYPE_NORMAL_IP IpType = "NORMAL_IP"
	IPTYPE_NETWORK IpType = "NETWORK"
	IPTYPE_BROADCAST IpType = "BROADCAST"
	IPTYPE_GATEWAY IpType = "GATEWAY"
	IPTYPE_ROUTER1 IpType = "ROUTER1"
	IPTYPE_ROUTER2 IpType = "ROUTER2"
	IPTYPE_IPMI IpType = "IPMI"
)

// All allowed values of IpType enum
var AllowedIpTypeEnumValues = []IpType{
	"NORMAL_IP",
	"NETWORK",
	"BROADCAST",
	"GATEWAY",
	"ROUTER1",
	"ROUTER2",
	"IPMI",
}

func (v *IpType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IpType(value)
	for _, existing := range AllowedIpTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IpType", value)
}

// NewIpTypeFromValue returns a pointer to a valid IpType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIpTypeFromValue(v string) (*IpType, error) {
	ev := IpType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IpType: valid values are %v", v, AllowedIpTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IpType) IsValid() bool {
	for _, existing := range AllowedIpTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ipType value
func (v IpType) Ptr() *IpType {
	return &v
}

type NullableIpType struct {
	value *IpType
	isSet bool
}

func (v NullableIpType) Get() *IpType {
	return v.value
}

func (v *NullableIpType) Set(val *IpType) {
	v.value = val
	v.isSet = true
}

func (v NullableIpType) IsSet() bool {
	return v.isSet
}

func (v *NullableIpType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpType(val *IpType) *NullableIpType {
	return &NullableIpType{value: val, isSet: true}
}

func (v NullableIpType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

