/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the DataTraffic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTraffic{}

// DataTraffic Data traffic commitment
type DataTraffic struct {
	Value *float32 `json:"value,omitempty"`
	Unit *string `json:"unit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DataTraffic DataTraffic

// NewDataTraffic instantiates a new DataTraffic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTraffic() *DataTraffic {
	this := DataTraffic{}
	return &this
}

// NewDataTrafficWithDefaults instantiates a new DataTraffic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTrafficWithDefaults() *DataTraffic {
	this := DataTraffic{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DataTraffic) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTraffic) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DataTraffic) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *DataTraffic) SetValue(v float32) {
	o.Value = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *DataTraffic) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTraffic) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *DataTraffic) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *DataTraffic) SetUnit(v string) {
	o.Unit = &v
}

func (o DataTraffic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTraffic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataTraffic) UnmarshalJSON(data []byte) (err error) {
	varDataTraffic := _DataTraffic{}

	err = json.Unmarshal(data, &varDataTraffic)

	if err != nil {
		return err
	}

	*o = DataTraffic(varDataTraffic)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "unit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataTraffic struct {
	value *DataTraffic
	isSet bool
}

func (v NullableDataTraffic) Get() *DataTraffic {
	return v.value
}

func (v *NullableDataTraffic) Set(val *DataTraffic) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTraffic) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTraffic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTraffic(val *DataTraffic) *NullableDataTraffic {
	return &NullableDataTraffic{value: val, isSet: true}
}

func (v NullableDataTraffic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTraffic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


