/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the Links type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Links{}

// Links Links to related resource locations
type Links struct {
	Self Self `json:"self"`
	Parent Parent `json:"parent"`
	ValidateSet ValidateSet `json:"validateSet"`
	AdditionalProperties map[string]interface{}
}

type _Links Links

// NewLinks instantiates a new Links object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinks(self Self, parent Parent, validateSet ValidateSet) *Links {
	this := Links{}
	this.Self = self
	this.Parent = parent
	this.ValidateSet = validateSet
	return &this
}

// NewLinksWithDefaults instantiates a new Links object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinksWithDefaults() *Links {
	this := Links{}
	return &this
}

// GetSelf returns the Self field value
func (o *Links) GetSelf() Self {
	if o == nil {
		var ret Self
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *Links) GetSelfOk() (*Self, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *Links) SetSelf(v Self) {
	o.Self = v
}

// GetParent returns the Parent field value
func (o *Links) GetParent() Parent {
	if o == nil {
		var ret Parent
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *Links) GetParentOk() (*Parent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parent, true
}

// SetParent sets field value
func (o *Links) SetParent(v Parent) {
	o.Parent = v
}

// GetValidateSet returns the ValidateSet field value
func (o *Links) GetValidateSet() ValidateSet {
	if o == nil {
		var ret ValidateSet
		return ret
	}

	return o.ValidateSet
}

// GetValidateSetOk returns a tuple with the ValidateSet field value
// and a boolean to check if the value has been set.
func (o *Links) GetValidateSetOk() (*ValidateSet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidateSet, true
}

// SetValidateSet sets field value
func (o *Links) SetValidateSet(v ValidateSet) {
	o.ValidateSet = v
}

func (o Links) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Links) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["self"] = o.Self
	toSerialize["parent"] = o.Parent
	toSerialize["validateSet"] = o.ValidateSet

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Links) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"self",
		"parent",
		"validateSet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinks := _Links{}

	err = json.Unmarshal(data, &varLinks)

	if err != nil {
		return err
	}

	*o = Links(varLinks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "self")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "validateSet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinks struct {
	value *Links
	isSet bool
}

func (v NullableLinks) Get() *Links {
	return v.value
}

func (v *NullableLinks) Set(val *Links) {
	v.value = val
	v.isSet = true
}

func (v NullableLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinks(val *Links) *NullableLinks {
	return &NullableLinks{value: val, isSet: true}
}

func (v NullableLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


