/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the LdLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LdLinks{}

// LdLinks Links to related resource locations
type LdLinks struct {
	Self Self `json:"self"`
	Collection Collection `json:"collection"`
	AdditionalProperties map[string]interface{}
}

type _LdLinks LdLinks

// NewLdLinks instantiates a new LdLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdLinks(self Self, collection Collection) *LdLinks {
	this := LdLinks{}
	this.Self = self
	this.Collection = collection
	return &this
}

// NewLdLinksWithDefaults instantiates a new LdLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdLinksWithDefaults() *LdLinks {
	this := LdLinks{}
	return &this
}

// GetSelf returns the Self field value
func (o *LdLinks) GetSelf() Self {
	if o == nil {
		var ret Self
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *LdLinks) GetSelfOk() (*Self, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *LdLinks) SetSelf(v Self) {
	o.Self = v
}

// GetCollection returns the Collection field value
func (o *LdLinks) GetCollection() Collection {
	if o == nil {
		var ret Collection
		return ret
	}

	return o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value
// and a boolean to check if the value has been set.
func (o *LdLinks) GetCollectionOk() (*Collection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Collection, true
}

// SetCollection sets field value
func (o *LdLinks) SetCollection(v Collection) {
	o.Collection = v
}

func (o LdLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LdLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["self"] = o.Self
	toSerialize["collection"] = o.Collection

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LdLinks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"self",
		"collection",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLdLinks := _LdLinks{}

	err = json.Unmarshal(data, &varLdLinks)

	if err != nil {
		return err
	}

	*o = LdLinks(varLdLinks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "self")
		delete(additionalProperties, "collection")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLdLinks struct {
	value *LdLinks
	isSet bool
}

func (v NullableLdLinks) Get() *LdLinks {
	return v.value
}

func (v *NullableLdLinks) Set(val *LdLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableLdLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableLdLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdLinks(val *LdLinks) *NullableLdLinks {
	return &NullableLdLinks{value: val, isSet: true}
}

func (v NullableLdLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


