/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the BaseResourceRecordSetList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseResourceRecordSetList{}

// BaseResourceRecordSetList struct for BaseResourceRecordSetList
type BaseResourceRecordSetList struct {
	// Optional additional information
	InfoMessage *string `json:"infoMessage,omitempty"`
	Links Links `json:"_links"`
	AdditionalProperties map[string]interface{}
}

type _BaseResourceRecordSetList BaseResourceRecordSetList

// NewBaseResourceRecordSetList instantiates a new BaseResourceRecordSetList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseResourceRecordSetList(links Links) *BaseResourceRecordSetList {
	this := BaseResourceRecordSetList{}
	this.Links = links
	return &this
}

// NewBaseResourceRecordSetListWithDefaults instantiates a new BaseResourceRecordSetList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseResourceRecordSetListWithDefaults() *BaseResourceRecordSetList {
	this := BaseResourceRecordSetList{}
	return &this
}

// GetInfoMessage returns the InfoMessage field value if set, zero value otherwise.
func (o *BaseResourceRecordSetList) GetInfoMessage() string {
	if o == nil || IsNil(o.InfoMessage) {
		var ret string
		return ret
	}
	return *o.InfoMessage
}

// GetInfoMessageOk returns a tuple with the InfoMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseResourceRecordSetList) GetInfoMessageOk() (*string, bool) {
	if o == nil || IsNil(o.InfoMessage) {
		return nil, false
	}
	return o.InfoMessage, true
}

// HasInfoMessage returns a boolean if a field has been set.
func (o *BaseResourceRecordSetList) HasInfoMessage() bool {
	if o != nil && !IsNil(o.InfoMessage) {
		return true
	}

	return false
}

// SetInfoMessage gets a reference to the given string and assigns it to the InfoMessage field.
func (o *BaseResourceRecordSetList) SetInfoMessage(v string) {
	o.InfoMessage = &v
}

// GetLinks returns the Links field value
func (o *BaseResourceRecordSetList) GetLinks() Links {
	if o == nil {
		var ret Links
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *BaseResourceRecordSetList) GetLinksOk() (*Links, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *BaseResourceRecordSetList) SetLinks(v Links) {
	o.Links = v
}

func (o BaseResourceRecordSetList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseResourceRecordSetList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InfoMessage) {
		toSerialize["infoMessage"] = o.InfoMessage
	}
	toSerialize["_links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BaseResourceRecordSetList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseResourceRecordSetList := _BaseResourceRecordSetList{}

	err = json.Unmarshal(data, &varBaseResourceRecordSetList)

	if err != nil {
		return err
	}

	*o = BaseResourceRecordSetList(varBaseResourceRecordSetList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "infoMessage")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseResourceRecordSetList struct {
	value *BaseResourceRecordSetList
	isSet bool
}

func (v NullableBaseResourceRecordSetList) Get() *BaseResourceRecordSetList {
	return v.value
}

func (v *NullableBaseResourceRecordSetList) Set(val *BaseResourceRecordSetList) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseResourceRecordSetList) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseResourceRecordSetList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseResourceRecordSetList(val *BaseResourceRecordSetList) *NullableBaseResourceRecordSetList {
	return &NullableBaseResourceRecordSetList{value: val, isSet: true}
}

func (v NullableBaseResourceRecordSetList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseResourceRecordSetList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


