/*
Dedicated Network Equipments

Testing NetworkequipmentAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package networkequipment

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/networkequipment"
)

func Test_networkequipment_NetworkequipmentAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NetworkequipmentAPIService CreateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.CreateCredential(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService DeleteCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		httpRes, err := apiClient.NetworkequipmentAPI.DeleteCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetCredentialList(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetCredentialListByType(context.Background(), networkEquipmentId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetIp(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetIpList(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetNetworkEquipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetNetworkEquipment(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetNetworkEquipmentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetNetworkEquipmentList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetNullRouteHistory(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService GetPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.GetPowerStatus(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService NullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.NullIpRoute(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService PowerCycle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.NetworkequipmentAPI.PowerCycle(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService PowerOff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.NetworkequipmentAPI.PowerOff(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService PowerOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.NetworkequipmentAPI.PowerOn(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService UnNullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.UnNullIpRoute(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService UpdateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.UpdateCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService UpdateIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.NetworkequipmentAPI.UpdateIp(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkequipmentAPIService UpdateReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.NetworkequipmentAPI.UpdateReference(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
