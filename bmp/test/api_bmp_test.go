/*
bmp

Testing BmpAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bmp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/bmp"
)

func Test_bmp_BmpAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BmpAPIService AddServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.AddServerCredential(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService CancelActiveJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.CancelActiveJob(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService ConfigureHardwareRaid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.ConfigureHardwareRaid(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService CreateServerDhcpReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.BmpAPI.CreateServerDhcpReservation(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService DeleteNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ string
		var username string

		httpRes, err := apiClient.BmpAPI.DeleteNetworkEquipmentCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService DeleteServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ string
		var username string

		httpRes, err := apiClient.BmpAPI.DeleteServerCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService EnableServerRescueMode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.EnableServerRescueMode(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService ExpireActiveJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.ExpireActiveJob(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetControlPanelList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BmpAPI.GetControlPanelList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetControlPanelListByOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingSystemId string

		resp, httpRes, err := apiClient.BmpAPI.GetControlPanelListByOperatingSystem(context.Background(), operatingSystemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetNetworkEquipmentCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ string

		resp, httpRes, err := apiClient.BmpAPI.GetNetworkEquipmentCredentialListByType(context.Background(), networkEquipmentId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetNetworkEquipmentPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.BmpAPI.GetNetworkEquipmentPowerStatus(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingSystemId string

		resp, httpRes, err := apiClient.BmpAPI.GetOperatingSystem(context.Background(), operatingSystemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetOperatingSystemList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BmpAPI.GetOperatingSystemList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetRescueImageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BmpAPI.GetRescueImageList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetServerCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.GetServerCredentialList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetServerDhcpReservationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.GetServerDhcpReservationList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetServerJobList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.GetServerJobList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService GetServerPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.GetServerPowerStatus(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService InstallOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.InstallOperatingSystem(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService IpmiResetServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.IpmiResetServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService NetworkEquipmentsCredentialsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ string
		var username string

		resp, httpRes, err := apiClient.BmpAPI.NetworkEquipmentsCredentialsGet(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService NetworkEquipmentsCredentialsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.BmpAPI.NetworkEquipmentsCredentialsList(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService NetworkEquipmentsCredentialsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.BmpAPI.NetworkEquipmentsCredentialsPost(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService PowerCycleNetworkEquipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.BmpAPI.PowerCycleNetworkEquipment(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService PowerCycleServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.BmpAPI.PowerCycleServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService PowerNetworkEquipmentOff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.BmpAPI.PowerNetworkEquipmentOff(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService PowerNetworkEquipmentOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.BmpAPI.PowerNetworkEquipmentOn(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService PowerServerOff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.BmpAPI.PowerServerOff(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService PowerServerOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.BmpAPI.PowerServerOn(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService RetryServerJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var jobId string

		resp, httpRes, err := apiClient.BmpAPI.RetryServerJob(context.Background(), serverId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService ScanHardware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmpAPI.ScanHardware(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService ServersCredentialsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ string
		var username string

		resp, httpRes, err := apiClient.BmpAPI.ServersCredentialsGet(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService ServersCredentialsListType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ string

		resp, httpRes, err := apiClient.BmpAPI.ServersCredentialsListType(context.Background(), serverId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService ServersCredentialsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ string
		var username string

		resp, httpRes, err := apiClient.BmpAPI.ServersCredentialsPut(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService ServersJobsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var jobId string

		resp, httpRes, err := apiClient.BmpAPI.ServersJobsGet(context.Background(), serverId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService ServersLeasesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.BmpAPI.ServersLeasesDelete(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmpAPIService UpdateNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ string
		var username string

		resp, httpRes, err := apiClient.BmpAPI.UpdateNetworkEquipmentCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
