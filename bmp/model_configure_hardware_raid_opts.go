/*
bmp

This documents the rest api bmp api provides.

API version: v2
Contact: development-networkautomation@leaseweb.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigureHardwareRaidOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigureHardwareRaidOpts{}

// ConfigureHardwareRaidOpts struct for ConfigureHardwareRaidOpts
type ConfigureHardwareRaidOpts struct {
	// Url which will receive callbacks
	CallbackUrl *string `json:"callbackUrl,omitempty"`
	// RAID level to apply, this value is only required if you specify a type HW
	Level *int32 `json:"level,omitempty"`
	// The number of disks you want to apply RAID on. If not specified all disks are used.
	NumberOfDisks *int32 `json:"numberOfDisks,omitempty"`
	// If set to `true`, server will be power cycled in order to complete the operation
	PowerCycle *bool `json:"powerCycle,omitempty"`
	Type RaidType `json:"type"`
}

type _ConfigureHardwareRaidOpts ConfigureHardwareRaidOpts

// NewConfigureHardwareRaidOpts instantiates a new ConfigureHardwareRaidOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigureHardwareRaidOpts(type_ RaidType) *ConfigureHardwareRaidOpts {
	this := ConfigureHardwareRaidOpts{}
	var powerCycle bool = true
	this.PowerCycle = &powerCycle
	this.Type = type_
	return &this
}

// NewConfigureHardwareRaidOptsWithDefaults instantiates a new ConfigureHardwareRaidOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigureHardwareRaidOptsWithDefaults() *ConfigureHardwareRaidOpts {
	this := ConfigureHardwareRaidOpts{}
	var powerCycle bool = true
	this.PowerCycle = &powerCycle
	return &this
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *ConfigureHardwareRaidOpts) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigureHardwareRaidOpts) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *ConfigureHardwareRaidOpts) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *ConfigureHardwareRaidOpts) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ConfigureHardwareRaidOpts) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigureHardwareRaidOpts) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ConfigureHardwareRaidOpts) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *ConfigureHardwareRaidOpts) SetLevel(v int32) {
	o.Level = &v
}

// GetNumberOfDisks returns the NumberOfDisks field value if set, zero value otherwise.
func (o *ConfigureHardwareRaidOpts) GetNumberOfDisks() int32 {
	if o == nil || IsNil(o.NumberOfDisks) {
		var ret int32
		return ret
	}
	return *o.NumberOfDisks
}

// GetNumberOfDisksOk returns a tuple with the NumberOfDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigureHardwareRaidOpts) GetNumberOfDisksOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfDisks) {
		return nil, false
	}
	return o.NumberOfDisks, true
}

// HasNumberOfDisks returns a boolean if a field has been set.
func (o *ConfigureHardwareRaidOpts) HasNumberOfDisks() bool {
	if o != nil && !IsNil(o.NumberOfDisks) {
		return true
	}

	return false
}

// SetNumberOfDisks gets a reference to the given int32 and assigns it to the NumberOfDisks field.
func (o *ConfigureHardwareRaidOpts) SetNumberOfDisks(v int32) {
	o.NumberOfDisks = &v
}

// GetPowerCycle returns the PowerCycle field value if set, zero value otherwise.
func (o *ConfigureHardwareRaidOpts) GetPowerCycle() bool {
	if o == nil || IsNil(o.PowerCycle) {
		var ret bool
		return ret
	}
	return *o.PowerCycle
}

// GetPowerCycleOk returns a tuple with the PowerCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigureHardwareRaidOpts) GetPowerCycleOk() (*bool, bool) {
	if o == nil || IsNil(o.PowerCycle) {
		return nil, false
	}
	return o.PowerCycle, true
}

// HasPowerCycle returns a boolean if a field has been set.
func (o *ConfigureHardwareRaidOpts) HasPowerCycle() bool {
	if o != nil && !IsNil(o.PowerCycle) {
		return true
	}

	return false
}

// SetPowerCycle gets a reference to the given bool and assigns it to the PowerCycle field.
func (o *ConfigureHardwareRaidOpts) SetPowerCycle(v bool) {
	o.PowerCycle = &v
}

// GetType returns the Type field value
func (o *ConfigureHardwareRaidOpts) GetType() RaidType {
	if o == nil {
		var ret RaidType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConfigureHardwareRaidOpts) GetTypeOk() (*RaidType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConfigureHardwareRaidOpts) SetType(v RaidType) {
	o.Type = v
}

func (o ConfigureHardwareRaidOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigureHardwareRaidOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.NumberOfDisks) {
		toSerialize["numberOfDisks"] = o.NumberOfDisks
	}
	if !IsNil(o.PowerCycle) {
		toSerialize["powerCycle"] = o.PowerCycle
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ConfigureHardwareRaidOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigureHardwareRaidOpts := _ConfigureHardwareRaidOpts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigureHardwareRaidOpts)

	if err != nil {
		return err
	}

	*o = ConfigureHardwareRaidOpts(varConfigureHardwareRaidOpts)

	return err
}

type NullableConfigureHardwareRaidOpts struct {
	value *ConfigureHardwareRaidOpts
	isSet bool
}

func (v NullableConfigureHardwareRaidOpts) Get() *ConfigureHardwareRaidOpts {
	return v.value
}

func (v *NullableConfigureHardwareRaidOpts) Set(val *ConfigureHardwareRaidOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigureHardwareRaidOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigureHardwareRaidOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigureHardwareRaidOpts(val *ConfigureHardwareRaidOpts) *NullableConfigureHardwareRaidOpts {
	return &NullableConfigureHardwareRaidOpts{value: val, isSet: true}
}

func (v NullableConfigureHardwareRaidOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigureHardwareRaidOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


