/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the Storage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Storage{}

// Storage struct for Storage
type Storage struct {
	Local *Local `json:"local,omitempty"`
	Central *Central `json:"central,omitempty"`
}

// NewStorage instantiates a new Storage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorage() *Storage {
	this := Storage{}
	return &this
}

// NewStorageWithDefaults instantiates a new Storage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageWithDefaults() *Storage {
	this := Storage{}
	return &this
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *Storage) GetLocal() Local {
	if o == nil || IsNil(o.Local) {
		var ret Local
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetLocalOk() (*Local, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *Storage) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given Local and assigns it to the Local field.
func (o *Storage) SetLocal(v Local) {
	o.Local = &v
}

// GetCentral returns the Central field value if set, zero value otherwise.
func (o *Storage) GetCentral() Central {
	if o == nil || IsNil(o.Central) {
		var ret Central
		return ret
	}
	return *o.Central
}

// GetCentralOk returns a tuple with the Central field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetCentralOk() (*Central, bool) {
	if o == nil || IsNil(o.Central) {
		return nil, false
	}
	return o.Central, true
}

// HasCentral returns a boolean if a field has been set.
func (o *Storage) HasCentral() bool {
	if o != nil && !IsNil(o.Central) {
		return true
	}

	return false
}

// SetCentral gets a reference to the given Central and assigns it to the Central field.
func (o *Storage) SetCentral(v Central) {
	o.Central = &v
}

func (o Storage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Storage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	if !IsNil(o.Central) {
		toSerialize["central"] = o.Central
	}
	return toSerialize, nil
}

type NullableStorage struct {
	value *Storage
	isSet bool
}

func (v NullableStorage) Get() *Storage {
	return v.value
}

func (v *NullableStorage) Set(val *Storage) {
	v.value = val
	v.isSet = true
}

func (v NullableStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorage(val *Storage) *NullableStorage {
	return &NullableStorage{value: val, isSet: true}
}

func (v NullableStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


