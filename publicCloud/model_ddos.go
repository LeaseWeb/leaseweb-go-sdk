/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the Ddos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ddos{}

// Ddos struct for Ddos
type Ddos struct {
	DetectionProfile *string `json:"detectionProfile,omitempty"`
	ProtectionType *string `json:"protectionType,omitempty"`
}

// NewDdos instantiates a new Ddos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdos() *Ddos {
	this := Ddos{}
	return &this
}

// NewDdosWithDefaults instantiates a new Ddos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdosWithDefaults() *Ddos {
	this := Ddos{}
	return &this
}

// GetDetectionProfile returns the DetectionProfile field value if set, zero value otherwise.
func (o *Ddos) GetDetectionProfile() string {
	if o == nil || IsNil(o.DetectionProfile) {
		var ret string
		return ret
	}
	return *o.DetectionProfile
}

// GetDetectionProfileOk returns a tuple with the DetectionProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ddos) GetDetectionProfileOk() (*string, bool) {
	if o == nil || IsNil(o.DetectionProfile) {
		return nil, false
	}
	return o.DetectionProfile, true
}

// HasDetectionProfile returns a boolean if a field has been set.
func (o *Ddos) HasDetectionProfile() bool {
	if o != nil && !IsNil(o.DetectionProfile) {
		return true
	}

	return false
}

// SetDetectionProfile gets a reference to the given string and assigns it to the DetectionProfile field.
func (o *Ddos) SetDetectionProfile(v string) {
	o.DetectionProfile = &v
}

// GetProtectionType returns the ProtectionType field value if set, zero value otherwise.
func (o *Ddos) GetProtectionType() string {
	if o == nil || IsNil(o.ProtectionType) {
		var ret string
		return ret
	}
	return *o.ProtectionType
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ddos) GetProtectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionType) {
		return nil, false
	}
	return o.ProtectionType, true
}

// HasProtectionType returns a boolean if a field has been set.
func (o *Ddos) HasProtectionType() bool {
	if o != nil && !IsNil(o.ProtectionType) {
		return true
	}

	return false
}

// SetProtectionType gets a reference to the given string and assigns it to the ProtectionType field.
func (o *Ddos) SetProtectionType(v string) {
	o.ProtectionType = &v
}

func (o Ddos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ddos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DetectionProfile) {
		toSerialize["detectionProfile"] = o.DetectionProfile
	}
	if !IsNil(o.ProtectionType) {
		toSerialize["protectionType"] = o.ProtectionType
	}
	return toSerialize, nil
}

type NullableDdos struct {
	value *Ddos
	isSet bool
}

func (v NullableDdos) Get() *Ddos {
	return v.value
}

func (v *NullableDdos) Set(val *Ddos) {
	v.value = val
	v.isSet = true
}

func (v NullableDdos) IsSet() bool {
	return v.isSet
}

func (v *NullableDdos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdos(val *Ddos) *NullableDdos {
	return &NullableDdos{value: val, isSet: true}
}

func (v NullableDdos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


