/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"fmt"
)

// checks if the LoadBalancerListenerUpdateOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerListenerUpdateOpts{}

// LoadBalancerListenerUpdateOpts struct for LoadBalancerListenerUpdateOpts
type LoadBalancerListenerUpdateOpts struct {
	Protocol NullableString `json:"protocol"`
	// Port that the listener listens to
	Port NullableInt32 `json:"port"`
	Certificate NullableCertificate1 `json:"certificate"`
	DefaultRule NullableListenerDefaultRule `json:"defaultRule"`
	AdditionalProperties map[string]interface{}
}

type _LoadBalancerListenerUpdateOpts LoadBalancerListenerUpdateOpts

// NewLoadBalancerListenerUpdateOpts instantiates a new LoadBalancerListenerUpdateOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerListenerUpdateOpts(protocol NullableString, port NullableInt32, certificate NullableCertificate1, defaultRule NullableListenerDefaultRule) *LoadBalancerListenerUpdateOpts {
	this := LoadBalancerListenerUpdateOpts{}
	this.Protocol = protocol
	this.Port = port
	this.Certificate = certificate
	this.DefaultRule = defaultRule
	return &this
}

// NewLoadBalancerListenerUpdateOptsWithDefaults instantiates a new LoadBalancerListenerUpdateOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerListenerUpdateOptsWithDefaults() *LoadBalancerListenerUpdateOpts {
	this := LoadBalancerListenerUpdateOpts{}
	return &this
}

// GetProtocol returns the Protocol field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LoadBalancerListenerUpdateOpts) GetProtocol() string {
	if o == nil || o.Protocol.Get() == nil {
		var ret string
		return ret
	}

	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadBalancerListenerUpdateOpts) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// SetProtocol sets field value
func (o *LoadBalancerListenerUpdateOpts) SetProtocol(v string) {
	o.Protocol.Set(&v)
}

// GetPort returns the Port field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *LoadBalancerListenerUpdateOpts) GetPort() int32 {
	if o == nil || o.Port.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadBalancerListenerUpdateOpts) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// SetPort sets field value
func (o *LoadBalancerListenerUpdateOpts) SetPort(v int32) {
	o.Port.Set(&v)
}

// GetCertificate returns the Certificate field value
// If the value is explicit nil, the zero value for Certificate1 will be returned
func (o *LoadBalancerListenerUpdateOpts) GetCertificate() Certificate1 {
	if o == nil || o.Certificate.Get() == nil {
		var ret Certificate1
		return ret
	}

	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadBalancerListenerUpdateOpts) GetCertificateOk() (*Certificate1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// SetCertificate sets field value
func (o *LoadBalancerListenerUpdateOpts) SetCertificate(v Certificate1) {
	o.Certificate.Set(&v)
}

// GetDefaultRule returns the DefaultRule field value
// If the value is explicit nil, the zero value for ListenerDefaultRule will be returned
func (o *LoadBalancerListenerUpdateOpts) GetDefaultRule() ListenerDefaultRule {
	if o == nil || o.DefaultRule.Get() == nil {
		var ret ListenerDefaultRule
		return ret
	}

	return *o.DefaultRule.Get()
}

// GetDefaultRuleOk returns a tuple with the DefaultRule field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadBalancerListenerUpdateOpts) GetDefaultRuleOk() (*ListenerDefaultRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultRule.Get(), o.DefaultRule.IsSet()
}

// SetDefaultRule sets field value
func (o *LoadBalancerListenerUpdateOpts) SetDefaultRule(v ListenerDefaultRule) {
	o.DefaultRule.Set(&v)
}

func (o LoadBalancerListenerUpdateOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerListenerUpdateOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol"] = o.Protocol.Get()
	toSerialize["port"] = o.Port.Get()
	toSerialize["certificate"] = o.Certificate.Get()
	toSerialize["defaultRule"] = o.DefaultRule.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoadBalancerListenerUpdateOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protocol",
		"port",
		"certificate",
		"defaultRule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadBalancerListenerUpdateOpts := _LoadBalancerListenerUpdateOpts{}

	err = json.Unmarshal(data, &varLoadBalancerListenerUpdateOpts)

	if err != nil {
		return err
	}

	*o = LoadBalancerListenerUpdateOpts(varLoadBalancerListenerUpdateOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "port")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "defaultRule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoadBalancerListenerUpdateOpts struct {
	value *LoadBalancerListenerUpdateOpts
	isSet bool
}

func (v NullableLoadBalancerListenerUpdateOpts) Get() *LoadBalancerListenerUpdateOpts {
	return v.value
}

func (v *NullableLoadBalancerListenerUpdateOpts) Set(val *LoadBalancerListenerUpdateOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerListenerUpdateOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerListenerUpdateOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerListenerUpdateOpts(val *LoadBalancerListenerUpdateOpts) *NullableLoadBalancerListenerUpdateOpts {
	return &NullableLoadBalancerListenerUpdateOpts{value: val, isSet: true}
}

func (v NullableLoadBalancerListenerUpdateOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerListenerUpdateOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


