/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoadBalancerListenerOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerListenerOpts{}

// LoadBalancerListenerOpts struct for LoadBalancerListenerOpts
type LoadBalancerListenerOpts struct {
	Protocol string `json:"protocol"`
	// Port that the listener listens to
	Port int32 `json:"port"`
	Certificate *Certificate `json:"certificate,omitempty"`
}

type _LoadBalancerListenerOpts LoadBalancerListenerOpts

// NewLoadBalancerListenerOpts instantiates a new LoadBalancerListenerOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerListenerOpts(protocol string, port int32) *LoadBalancerListenerOpts {
	this := LoadBalancerListenerOpts{}
	this.Protocol = protocol
	this.Port = port
	return &this
}

// NewLoadBalancerListenerOptsWithDefaults instantiates a new LoadBalancerListenerOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerListenerOptsWithDefaults() *LoadBalancerListenerOpts {
	this := LoadBalancerListenerOpts{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *LoadBalancerListenerOpts) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *LoadBalancerListenerOpts) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *LoadBalancerListenerOpts) SetProtocol(v string) {
	o.Protocol = v
}

// GetPort returns the Port field value
func (o *LoadBalancerListenerOpts) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *LoadBalancerListenerOpts) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *LoadBalancerListenerOpts) SetPort(v int32) {
	o.Port = v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *LoadBalancerListenerOpts) GetCertificate() Certificate {
	if o == nil || IsNil(o.Certificate) {
		var ret Certificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerListenerOpts) GetCertificateOk() (*Certificate, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *LoadBalancerListenerOpts) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given Certificate and assigns it to the Certificate field.
func (o *LoadBalancerListenerOpts) SetCertificate(v Certificate) {
	o.Certificate = &v
}

func (o LoadBalancerListenerOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerListenerOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol"] = o.Protocol
	toSerialize["port"] = o.Port
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	return toSerialize, nil
}

func (o *LoadBalancerListenerOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protocol",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadBalancerListenerOpts := _LoadBalancerListenerOpts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoadBalancerListenerOpts)

	if err != nil {
		return err
	}

	*o = LoadBalancerListenerOpts(varLoadBalancerListenerOpts)

	return err
}

type NullableLoadBalancerListenerOpts struct {
	value *LoadBalancerListenerOpts
	isSet bool
}

func (v NullableLoadBalancerListenerOpts) Get() *LoadBalancerListenerOpts {
	return v.value
}

func (v *NullableLoadBalancerListenerOpts) Set(val *LoadBalancerListenerOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerListenerOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerListenerOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerListenerOpts(val *LoadBalancerListenerOpts) *NullableLoadBalancerListenerOpts {
	return &NullableLoadBalancerListenerOpts{value: val, isSet: true}
}

func (v NullableLoadBalancerListenerOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerListenerOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


