/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the LoadBalancerConfiguration1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerConfiguration1{}

// LoadBalancerConfiguration1 Different configuration assigned for the load balancer
type LoadBalancerConfiguration1 struct {
	StickySession NullableStickySession `json:"stickySession,omitempty"`
	// Algorithm to be used for load balancer
	Balance *string `json:"balance,omitempty"`
	HealthCheck NullableHealthCheck `json:"healthCheck,omitempty"`
	// Is xForwardedFor header enabled or not
	XForwardedFor *bool `json:"xForwardedFor,omitempty"`
	// Time to close the connection if load balancer is idle
	IdleTimeOut *int32 `json:"idleTimeOut,omitempty"`
	// Port on which the backend (target) servers are listening to handle incoming requests
	TargetPort *int32 `json:"targetPort,omitempty"`
}

// NewLoadBalancerConfiguration1 instantiates a new LoadBalancerConfiguration1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerConfiguration1() *LoadBalancerConfiguration1 {
	this := LoadBalancerConfiguration1{}
	return &this
}

// NewLoadBalancerConfiguration1WithDefaults instantiates a new LoadBalancerConfiguration1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerConfiguration1WithDefaults() *LoadBalancerConfiguration1 {
	this := LoadBalancerConfiguration1{}
	return &this
}

// GetStickySession returns the StickySession field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoadBalancerConfiguration1) GetStickySession() StickySession {
	if o == nil || IsNil(o.StickySession.Get()) {
		var ret StickySession
		return ret
	}
	return *o.StickySession.Get()
}

// GetStickySessionOk returns a tuple with the StickySession field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadBalancerConfiguration1) GetStickySessionOk() (*StickySession, bool) {
	if o == nil {
		return nil, false
	}
	return o.StickySession.Get(), o.StickySession.IsSet()
}

// HasStickySession returns a boolean if a field has been set.
func (o *LoadBalancerConfiguration1) HasStickySession() bool {
	if o != nil && o.StickySession.IsSet() {
		return true
	}

	return false
}

// SetStickySession gets a reference to the given NullableStickySession and assigns it to the StickySession field.
func (o *LoadBalancerConfiguration1) SetStickySession(v StickySession) {
	o.StickySession.Set(&v)
}
// SetStickySessionNil sets the value for StickySession to be an explicit nil
func (o *LoadBalancerConfiguration1) SetStickySessionNil() {
	o.StickySession.Set(nil)
}

// UnsetStickySession ensures that no value is present for StickySession, not even an explicit nil
func (o *LoadBalancerConfiguration1) UnsetStickySession() {
	o.StickySession.Unset()
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *LoadBalancerConfiguration1) GetBalance() string {
	if o == nil || IsNil(o.Balance) {
		var ret string
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerConfiguration1) GetBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *LoadBalancerConfiguration1) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given string and assigns it to the Balance field.
func (o *LoadBalancerConfiguration1) SetBalance(v string) {
	o.Balance = &v
}

// GetHealthCheck returns the HealthCheck field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoadBalancerConfiguration1) GetHealthCheck() HealthCheck {
	if o == nil || IsNil(o.HealthCheck.Get()) {
		var ret HealthCheck
		return ret
	}
	return *o.HealthCheck.Get()
}

// GetHealthCheckOk returns a tuple with the HealthCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadBalancerConfiguration1) GetHealthCheckOk() (*HealthCheck, bool) {
	if o == nil {
		return nil, false
	}
	return o.HealthCheck.Get(), o.HealthCheck.IsSet()
}

// HasHealthCheck returns a boolean if a field has been set.
func (o *LoadBalancerConfiguration1) HasHealthCheck() bool {
	if o != nil && o.HealthCheck.IsSet() {
		return true
	}

	return false
}

// SetHealthCheck gets a reference to the given NullableHealthCheck and assigns it to the HealthCheck field.
func (o *LoadBalancerConfiguration1) SetHealthCheck(v HealthCheck) {
	o.HealthCheck.Set(&v)
}
// SetHealthCheckNil sets the value for HealthCheck to be an explicit nil
func (o *LoadBalancerConfiguration1) SetHealthCheckNil() {
	o.HealthCheck.Set(nil)
}

// UnsetHealthCheck ensures that no value is present for HealthCheck, not even an explicit nil
func (o *LoadBalancerConfiguration1) UnsetHealthCheck() {
	o.HealthCheck.Unset()
}

// GetXForwardedFor returns the XForwardedFor field value if set, zero value otherwise.
func (o *LoadBalancerConfiguration1) GetXForwardedFor() bool {
	if o == nil || IsNil(o.XForwardedFor) {
		var ret bool
		return ret
	}
	return *o.XForwardedFor
}

// GetXForwardedForOk returns a tuple with the XForwardedFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerConfiguration1) GetXForwardedForOk() (*bool, bool) {
	if o == nil || IsNil(o.XForwardedFor) {
		return nil, false
	}
	return o.XForwardedFor, true
}

// HasXForwardedFor returns a boolean if a field has been set.
func (o *LoadBalancerConfiguration1) HasXForwardedFor() bool {
	if o != nil && !IsNil(o.XForwardedFor) {
		return true
	}

	return false
}

// SetXForwardedFor gets a reference to the given bool and assigns it to the XForwardedFor field.
func (o *LoadBalancerConfiguration1) SetXForwardedFor(v bool) {
	o.XForwardedFor = &v
}

// GetIdleTimeOut returns the IdleTimeOut field value if set, zero value otherwise.
func (o *LoadBalancerConfiguration1) GetIdleTimeOut() int32 {
	if o == nil || IsNil(o.IdleTimeOut) {
		var ret int32
		return ret
	}
	return *o.IdleTimeOut
}

// GetIdleTimeOutOk returns a tuple with the IdleTimeOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerConfiguration1) GetIdleTimeOutOk() (*int32, bool) {
	if o == nil || IsNil(o.IdleTimeOut) {
		return nil, false
	}
	return o.IdleTimeOut, true
}

// HasIdleTimeOut returns a boolean if a field has been set.
func (o *LoadBalancerConfiguration1) HasIdleTimeOut() bool {
	if o != nil && !IsNil(o.IdleTimeOut) {
		return true
	}

	return false
}

// SetIdleTimeOut gets a reference to the given int32 and assigns it to the IdleTimeOut field.
func (o *LoadBalancerConfiguration1) SetIdleTimeOut(v int32) {
	o.IdleTimeOut = &v
}

// GetTargetPort returns the TargetPort field value if set, zero value otherwise.
func (o *LoadBalancerConfiguration1) GetTargetPort() int32 {
	if o == nil || IsNil(o.TargetPort) {
		var ret int32
		return ret
	}
	return *o.TargetPort
}

// GetTargetPortOk returns a tuple with the TargetPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerConfiguration1) GetTargetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.TargetPort) {
		return nil, false
	}
	return o.TargetPort, true
}

// HasTargetPort returns a boolean if a field has been set.
func (o *LoadBalancerConfiguration1) HasTargetPort() bool {
	if o != nil && !IsNil(o.TargetPort) {
		return true
	}

	return false
}

// SetTargetPort gets a reference to the given int32 and assigns it to the TargetPort field.
func (o *LoadBalancerConfiguration1) SetTargetPort(v int32) {
	o.TargetPort = &v
}

func (o LoadBalancerConfiguration1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerConfiguration1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StickySession.IsSet() {
		toSerialize["stickySession"] = o.StickySession.Get()
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if o.HealthCheck.IsSet() {
		toSerialize["healthCheck"] = o.HealthCheck.Get()
	}
	if !IsNil(o.XForwardedFor) {
		toSerialize["xForwardedFor"] = o.XForwardedFor
	}
	if !IsNil(o.IdleTimeOut) {
		toSerialize["idleTimeOut"] = o.IdleTimeOut
	}
	if !IsNil(o.TargetPort) {
		toSerialize["targetPort"] = o.TargetPort
	}
	return toSerialize, nil
}

type NullableLoadBalancerConfiguration1 struct {
	value *LoadBalancerConfiguration1
	isSet bool
}

func (v NullableLoadBalancerConfiguration1) Get() *LoadBalancerConfiguration1 {
	return v.value
}

func (v *NullableLoadBalancerConfiguration1) Set(val *LoadBalancerConfiguration1) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerConfiguration1) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerConfiguration1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerConfiguration1(val *LoadBalancerConfiguration1) *NullableLoadBalancerConfiguration1 {
	return &NullableLoadBalancerConfiguration1{value: val, isSet: true}
}

func (v NullableLoadBalancerConfiguration1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerConfiguration1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


