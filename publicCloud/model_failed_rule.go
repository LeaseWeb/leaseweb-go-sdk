/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the FailedRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailedRule{}

// FailedRule struct for FailedRule
type FailedRule struct {
	Id *string `json:"id,omitempty"`
	// The reason which the edition has failed
	Message *string `json:"message,omitempty"`
}

// NewFailedRule instantiates a new FailedRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailedRule() *FailedRule {
	this := FailedRule{}
	return &this
}

// NewFailedRuleWithDefaults instantiates a new FailedRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailedRuleWithDefaults() *FailedRule {
	this := FailedRule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FailedRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailedRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FailedRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FailedRule) SetId(v string) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *FailedRule) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailedRule) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *FailedRule) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *FailedRule) SetMessage(v string) {
	o.Message = &v
}

func (o FailedRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailedRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableFailedRule struct {
	value *FailedRule
	isSet bool
}

func (v NullableFailedRule) Get() *FailedRule {
	return v.value
}

func (v *NullableFailedRule) Set(val *FailedRule) {
	v.value = val
	v.isSet = true
}

func (v NullableFailedRule) IsSet() bool {
	return v.isSet
}

func (v *NullableFailedRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailedRule(val *FailedRule) *NullableFailedRule {
	return &NullableFailedRule{value: val, isSet: true}
}

func (v NullableFailedRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailedRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


