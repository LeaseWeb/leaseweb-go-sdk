/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Instance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instance{}

// Instance struct for Instance
type Instance struct {
	// The customer's equipment ID
	EquipmentId *string `json:"equipmentId,omitempty"`
	SalesOrgId *string `json:"salesOrgId,omitempty"`
	// The customer ID who owns the instance
	CustomerId *string `json:"customerId,omitempty"`
	// The unique identifier of the instance
	Id string `json:"id"`
	Resources InstanceResources `json:"resources"`
	// The region in which the instance was launched
	Region string `json:"region"`
	// The identifying name set to the instance
	Reference NullableString `json:"reference"`
	OperatingSystem OperatingSystem `json:"operatingSystem"`
	State InstanceState `json:"state"`
	// The product type
	ProductType string `json:"productType"`
	HasPublicIpV4 bool `json:"hasPublicIpV4"`
	includesPrivateNetwork bool `json:"hasPrivateNetwork"`
	Type InstanceTypeName `json:"type"`
	// The root disk's size in GB. Must be at least 5 GB for Linux and FreeBSD instances and 50 GB for Windows instances
	RootDiskSize int32 `json:"rootDiskSize"`
	// The root disk's storage type
	RootDiskStorageType string `json:"rootDiskStorageType"`
	Ips []Ip `json:"ips"`
	// Date and time when the instance was started for the first time, right after launching it
	StartedAt NullableTime `json:"startedAt"`
	Contract Contract `json:"contract"`
	Iso NullableIso `json:"iso"`
	// Market App ID that must be installed into the instance
	MarketAppId NullableString `json:"marketAppId"`
	PrivateNetwork NullablePrivateNetwork `json:"privateNetwork"`
	AutoScalingGroup NullableAutoScalingGroup `json:"autoScalingGroup"`
}

type _Instance Instance

// NewInstance instantiates a new Instance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstance(id string, resources InstanceResources, region string, reference NullableString, operatingSystem OperatingSystem, state InstanceState, productType string, hasPublicIpV4 bool, includesPrivateNetwork bool, type_ InstanceTypeName, rootDiskSize int32, rootDiskStorageType string, ips []Ip, startedAt NullableTime, contract Contract, iso NullableIso, marketAppId NullableString, privateNetwork NullablePrivateNetwork, autoScalingGroup NullableAutoScalingGroup) *Instance {
	this := Instance{}
	this.Id = id
	this.Resources = resources
	this.Region = region
	this.Reference = reference
	this.OperatingSystem = operatingSystem
	this.State = state
	this.ProductType = productType
	this.HasPublicIpV4 = hasPublicIpV4
	this.includesPrivateNetwork = includesPrivateNetwork
	this.Type = type_
	this.RootDiskSize = rootDiskSize
	this.RootDiskStorageType = rootDiskStorageType
	this.Ips = ips
	this.StartedAt = startedAt
	this.Contract = contract
	this.Iso = iso
	this.MarketAppId = marketAppId
	this.PrivateNetwork = privateNetwork
	this.AutoScalingGroup = autoScalingGroup
	return &this
}

// NewInstanceWithDefaults instantiates a new Instance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceWithDefaults() *Instance {
	this := Instance{}
	return &this
}

// GetEquipmentId returns the EquipmentId field value if set, zero value otherwise.
func (o *Instance) GetEquipmentId() string {
	if o == nil || IsNil(o.EquipmentId) {
		var ret string
		return ret
	}
	return *o.EquipmentId
}

// GetEquipmentIdOk returns a tuple with the EquipmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetEquipmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EquipmentId) {
		return nil, false
	}
	return o.EquipmentId, true
}

// HasEquipmentId returns a boolean if a field has been set.
func (o *Instance) HasEquipmentId() bool {
	if o != nil && !IsNil(o.EquipmentId) {
		return true
	}

	return false
}

// SetEquipmentId gets a reference to the given string and assigns it to the EquipmentId field.
func (o *Instance) SetEquipmentId(v string) {
	o.EquipmentId = &v
}

// GetSalesOrgId returns the SalesOrgId field value if set, zero value otherwise.
func (o *Instance) GetSalesOrgId() string {
	if o == nil || IsNil(o.SalesOrgId) {
		var ret string
		return ret
	}
	return *o.SalesOrgId
}

// GetSalesOrgIdOk returns a tuple with the SalesOrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetSalesOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesOrgId) {
		return nil, false
	}
	return o.SalesOrgId, true
}

// HasSalesOrgId returns a boolean if a field has been set.
func (o *Instance) HasSalesOrgId() bool {
	if o != nil && !IsNil(o.SalesOrgId) {
		return true
	}

	return false
}

// SetSalesOrgId gets a reference to the given string and assigns it to the SalesOrgId field.
func (o *Instance) SetSalesOrgId(v string) {
	o.SalesOrgId = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *Instance) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *Instance) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *Instance) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetId returns the Id field value
func (o *Instance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Instance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Instance) SetId(v string) {
	o.Id = v
}

// GetResources returns the Resources field value
func (o *Instance) GetResources() InstanceResources {
	if o == nil {
		var ret InstanceResources
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *Instance) GetResourcesOk() (*InstanceResources, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *Instance) SetResources(v InstanceResources) {
	o.Resources = v
}

// GetRegion returns the Region field value
func (o *Instance) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *Instance) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *Instance) SetRegion(v string) {
	o.Region = v
}

// GetReference returns the Reference field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Instance) GetReference() string {
	if o == nil || o.Reference.Get() == nil {
		var ret string
		return ret
	}

	return *o.Reference.Get()
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reference.Get(), o.Reference.IsSet()
}

// SetReference sets field value
func (o *Instance) SetReference(v string) {
	o.Reference.Set(&v)
}

// GetOperatingSystem returns the OperatingSystem field value
func (o *Instance) GetOperatingSystem() OperatingSystem {
	if o == nil {
		var ret OperatingSystem
		return ret
	}

	return o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value
// and a boolean to check if the value has been set.
func (o *Instance) GetOperatingSystemOk() (*OperatingSystem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperatingSystem, true
}

// SetOperatingSystem sets field value
func (o *Instance) SetOperatingSystem(v OperatingSystem) {
	o.OperatingSystem = v
}

// GetState returns the State field value
func (o *Instance) GetState() InstanceState {
	if o == nil {
		var ret InstanceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Instance) GetStateOk() (*InstanceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Instance) SetState(v InstanceState) {
	o.State = v
}

// GetProductType returns the ProductType field value
func (o *Instance) GetProductType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *Instance) GetProductTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *Instance) SetProductType(v string) {
	o.ProductType = v
}

// GetHasPublicIpV4 returns the HasPublicIpV4 field value
func (o *Instance) GetHasPublicIpV4() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPublicIpV4
}

// GetHasPublicIpV4Ok returns a tuple with the HasPublicIpV4 field value
// and a boolean to check if the value has been set.
func (o *Instance) GetHasPublicIpV4Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasPublicIpV4, true
}

// SetHasPublicIpV4 sets field value
func (o *Instance) SetHasPublicIpV4(v bool) {
	o.HasPublicIpV4 = v
}

// GetincludesPrivateNetwork returns the includesPrivateNetwork field value
func (o *Instance) GetincludesPrivateNetwork() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.includesPrivateNetwork
}

// GetincludesPrivateNetworkOk returns a tuple with the includesPrivateNetwork field value
// and a boolean to check if the value has been set.
func (o *Instance) GetincludesPrivateNetworkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.includesPrivateNetwork, true
}

// SetincludesPrivateNetwork sets field value
func (o *Instance) SetincludesPrivateNetwork(v bool) {
	o.includesPrivateNetwork = v
}

// GetType returns the Type field value
func (o *Instance) GetType() InstanceTypeName {
	if o == nil {
		var ret InstanceTypeName
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Instance) GetTypeOk() (*InstanceTypeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Instance) SetType(v InstanceTypeName) {
	o.Type = v
}

// GetRootDiskSize returns the RootDiskSize field value
func (o *Instance) GetRootDiskSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RootDiskSize
}

// GetRootDiskSizeOk returns a tuple with the RootDiskSize field value
// and a boolean to check if the value has been set.
func (o *Instance) GetRootDiskSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootDiskSize, true
}

// SetRootDiskSize sets field value
func (o *Instance) SetRootDiskSize(v int32) {
	o.RootDiskSize = v
}

// GetRootDiskStorageType returns the RootDiskStorageType field value
func (o *Instance) GetRootDiskStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootDiskStorageType
}

// GetRootDiskStorageTypeOk returns a tuple with the RootDiskStorageType field value
// and a boolean to check if the value has been set.
func (o *Instance) GetRootDiskStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootDiskStorageType, true
}

// SetRootDiskStorageType sets field value
func (o *Instance) SetRootDiskStorageType(v string) {
	o.RootDiskStorageType = v
}

// GetIps returns the Ips field value
func (o *Instance) GetIps() []Ip {
	if o == nil {
		var ret []Ip
		return ret
	}

	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value
// and a boolean to check if the value has been set.
func (o *Instance) GetIpsOk() ([]Ip, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ips, true
}

// SetIps sets field value
func (o *Instance) SetIps(v []Ip) {
	o.Ips = v
}

// GetStartedAt returns the StartedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Instance) GetStartedAt() time.Time {
	if o == nil || o.StartedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// SetStartedAt sets field value
func (o *Instance) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}

// GetContract returns the Contract field value
func (o *Instance) GetContract() Contract {
	if o == nil {
		var ret Contract
		return ret
	}

	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value
// and a boolean to check if the value has been set.
func (o *Instance) GetContractOk() (*Contract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contract, true
}

// SetContract sets field value
func (o *Instance) SetContract(v Contract) {
	o.Contract = v
}

// GetIso returns the Iso field value
// If the value is explicit nil, the zero value for Iso will be returned
func (o *Instance) GetIso() Iso {
	if o == nil || o.Iso.Get() == nil {
		var ret Iso
		return ret
	}

	return *o.Iso.Get()
}

// GetIsoOk returns a tuple with the Iso field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetIsoOk() (*Iso, bool) {
	if o == nil {
		return nil, false
	}
	return o.Iso.Get(), o.Iso.IsSet()
}

// SetIso sets field value
func (o *Instance) SetIso(v Iso) {
	o.Iso.Set(&v)
}

// GetMarketAppId returns the MarketAppId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Instance) GetMarketAppId() string {
	if o == nil || o.MarketAppId.Get() == nil {
		var ret string
		return ret
	}

	return *o.MarketAppId.Get()
}

// GetMarketAppIdOk returns a tuple with the MarketAppId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetMarketAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarketAppId.Get(), o.MarketAppId.IsSet()
}

// SetMarketAppId sets field value
func (o *Instance) SetMarketAppId(v string) {
	o.MarketAppId.Set(&v)
}

// GetPrivateNetwork returns the PrivateNetwork field value
// If the value is explicit nil, the zero value for PrivateNetwork will be returned
func (o *Instance) GetPrivateNetwork() PrivateNetwork {
	if o == nil || o.PrivateNetwork.Get() == nil {
		var ret PrivateNetwork
		return ret
	}

	return *o.PrivateNetwork.Get()
}

// GetPrivateNetworkOk returns a tuple with the PrivateNetwork field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetPrivateNetworkOk() (*PrivateNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateNetwork.Get(), o.PrivateNetwork.IsSet()
}

// SetPrivateNetwork sets field value
func (o *Instance) SetPrivateNetwork(v PrivateNetwork) {
	o.PrivateNetwork.Set(&v)
}

// GetAutoScalingGroup returns the AutoScalingGroup field value
// If the value is explicit nil, the zero value for AutoScalingGroup will be returned
func (o *Instance) GetAutoScalingGroup() AutoScalingGroup {
	if o == nil || o.AutoScalingGroup.Get() == nil {
		var ret AutoScalingGroup
		return ret
	}

	return *o.AutoScalingGroup.Get()
}

// GetAutoScalingGroupOk returns a tuple with the AutoScalingGroup field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetAutoScalingGroupOk() (*AutoScalingGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoScalingGroup.Get(), o.AutoScalingGroup.IsSet()
}

// SetAutoScalingGroup sets field value
func (o *Instance) SetAutoScalingGroup(v AutoScalingGroup) {
	o.AutoScalingGroup.Set(&v)
}

func (o Instance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Instance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EquipmentId) {
		toSerialize["equipmentId"] = o.EquipmentId
	}
	if !IsNil(o.SalesOrgId) {
		toSerialize["salesOrgId"] = o.SalesOrgId
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	toSerialize["id"] = o.Id
	toSerialize["resources"] = o.Resources
	toSerialize["region"] = o.Region
	toSerialize["reference"] = o.Reference.Get()
	toSerialize["operatingSystem"] = o.OperatingSystem
	toSerialize["state"] = o.State
	toSerialize["productType"] = o.ProductType
	toSerialize["hasPublicIpV4"] = o.HasPublicIpV4
	toSerialize["hasPrivateNetwork"] = o.includesPrivateNetwork
	toSerialize["type"] = o.Type
	toSerialize["rootDiskSize"] = o.RootDiskSize
	toSerialize["rootDiskStorageType"] = o.RootDiskStorageType
	toSerialize["ips"] = o.Ips
	toSerialize["startedAt"] = o.StartedAt.Get()
	toSerialize["contract"] = o.Contract
	toSerialize["iso"] = o.Iso.Get()
	toSerialize["marketAppId"] = o.MarketAppId.Get()
	toSerialize["privateNetwork"] = o.PrivateNetwork.Get()
	toSerialize["autoScalingGroup"] = o.AutoScalingGroup.Get()
	return toSerialize, nil
}

func (o *Instance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"resources",
		"region",
		"reference",
		"operatingSystem",
		"state",
		"productType",
		"hasPublicIpV4",
		"hasPrivateNetwork",
		"type",
		"rootDiskSize",
		"rootDiskStorageType",
		"ips",
		"startedAt",
		"contract",
		"iso",
		"marketAppId",
		"privateNetwork",
		"autoScalingGroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstance := _Instance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstance)

	if err != nil {
		return err
	}

	*o = Instance(varInstance)

	return err
}

type NullableInstance struct {
	value *Instance
	isSet bool
}

func (v NullableInstance) Get() *Instance {
	return v.value
}

func (v *NullableInstance) Set(val *Instance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstance(val *Instance) *NullableInstance {
	return &NullableInstance{value: val, isSet: true}
}

func (v NullableInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


