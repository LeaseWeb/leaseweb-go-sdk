/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"time"
)

// checks if the Instance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instance{}

// Instance struct for Instance
type Instance struct {
	// The customer's equipment ID
	EquipmentId *string `json:"equipmentId,omitempty"`
	SalesOrgId *string `json:"salesOrgId,omitempty"`
	// The customer ID who owns the instance
	CustomerId *string `json:"customerId,omitempty"`
	// The unique identifier of the instance
	Id *string `json:"id,omitempty"`
	Resources *InstanceResources `json:"resources,omitempty"`
	// The region in which the instance was launched
	Region *string `json:"region,omitempty"`
	// The identifying name set to the instance
	Reference *string `json:"reference,omitempty"`
	OperatingSystem *OperatingSystem `json:"operatingSystem,omitempty"`
	State *InstanceState `json:"state,omitempty"`
	// The product type
	ProductType *string `json:"productType,omitempty"`
	HasPublicIpV4 *bool `json:"hasPublicIpV4,omitempty"`
	includesPrivateNetwork *bool `json:"hasPrivateNetwork,omitempty"`
	Type *InstanceTypeName `json:"type,omitempty"`
	// The root disk's size in GB. Must be at least 5 GB for Linux and FreeBSD instances and 50 GB for Windows instances
	RootDiskSize *int32 `json:"rootDiskSize,omitempty"`
	// The root disk's storage type
	RootDiskStorageType *string `json:"rootDiskStorageType,omitempty"`
	Ips []Ip `json:"ips,omitempty"`
	// Date and time when the instance was started for the first time, right after launching it
	StartedAt NullableTime `json:"startedAt,omitempty"`
	Contract *Contract `json:"contract,omitempty"`
	Iso NullableIso `json:"iso,omitempty"`
	// Market App ID that must be installed into the instance
	MarketAppId NullableString `json:"marketAppId,omitempty"`
	PrivateNetwork NullablePrivateNetwork `json:"privateNetwork,omitempty"`
}

// NewInstance instantiates a new Instance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstance() *Instance {
	this := Instance{}
	return &this
}

// NewInstanceWithDefaults instantiates a new Instance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceWithDefaults() *Instance {
	this := Instance{}
	return &this
}

// GetEquipmentId returns the EquipmentId field value if set, zero value otherwise.
func (o *Instance) GetEquipmentId() string {
	if o == nil || IsNil(o.EquipmentId) {
		var ret string
		return ret
	}
	return *o.EquipmentId
}

// GetEquipmentIdOk returns a tuple with the EquipmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetEquipmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EquipmentId) {
		return nil, false
	}
	return o.EquipmentId, true
}

// HasEquipmentId returns a boolean if a field has been set.
func (o *Instance) HasEquipmentId() bool {
	if o != nil && !IsNil(o.EquipmentId) {
		return true
	}

	return false
}

// SetEquipmentId gets a reference to the given string and assigns it to the EquipmentId field.
func (o *Instance) SetEquipmentId(v string) {
	o.EquipmentId = &v
}

// GetSalesOrgId returns the SalesOrgId field value if set, zero value otherwise.
func (o *Instance) GetSalesOrgId() string {
	if o == nil || IsNil(o.SalesOrgId) {
		var ret string
		return ret
	}
	return *o.SalesOrgId
}

// GetSalesOrgIdOk returns a tuple with the SalesOrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetSalesOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesOrgId) {
		return nil, false
	}
	return o.SalesOrgId, true
}

// HasSalesOrgId returns a boolean if a field has been set.
func (o *Instance) HasSalesOrgId() bool {
	if o != nil && !IsNil(o.SalesOrgId) {
		return true
	}

	return false
}

// SetSalesOrgId gets a reference to the given string and assigns it to the SalesOrgId field.
func (o *Instance) SetSalesOrgId(v string) {
	o.SalesOrgId = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *Instance) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *Instance) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *Instance) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Instance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Instance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Instance) SetId(v string) {
	o.Id = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Instance) GetResources() InstanceResources {
	if o == nil || IsNil(o.Resources) {
		var ret InstanceResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetResourcesOk() (*InstanceResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Instance) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given InstanceResources and assigns it to the Resources field.
func (o *Instance) SetResources(v InstanceResources) {
	o.Resources = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Instance) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Instance) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Instance) SetRegion(v string) {
	o.Region = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Instance) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Instance) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Instance) SetReference(v string) {
	o.Reference = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *Instance) GetOperatingSystem() OperatingSystem {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret OperatingSystem
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetOperatingSystemOk() (*OperatingSystem, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *Instance) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given OperatingSystem and assigns it to the OperatingSystem field.
func (o *Instance) SetOperatingSystem(v OperatingSystem) {
	o.OperatingSystem = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Instance) GetState() InstanceState {
	if o == nil || IsNil(o.State) {
		var ret InstanceState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetStateOk() (*InstanceState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Instance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given InstanceState and assigns it to the State field.
func (o *Instance) SetState(v InstanceState) {
	o.State = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *Instance) GetProductType() string {
	if o == nil || IsNil(o.ProductType) {
		var ret string
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetProductTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *Instance) HasProductType() bool {
	if o != nil && !IsNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given string and assigns it to the ProductType field.
func (o *Instance) SetProductType(v string) {
	o.ProductType = &v
}

// GetHasPublicIpV4 returns the HasPublicIpV4 field value if set, zero value otherwise.
func (o *Instance) GetHasPublicIpV4() bool {
	if o == nil || IsNil(o.HasPublicIpV4) {
		var ret bool
		return ret
	}
	return *o.HasPublicIpV4
}

// GetHasPublicIpV4Ok returns a tuple with the HasPublicIpV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetHasPublicIpV4Ok() (*bool, bool) {
	if o == nil || IsNil(o.HasPublicIpV4) {
		return nil, false
	}
	return o.HasPublicIpV4, true
}

// HasHasPublicIpV4 returns a boolean if a field has been set.
func (o *Instance) HasHasPublicIpV4() bool {
	if o != nil && !IsNil(o.HasPublicIpV4) {
		return true
	}

	return false
}

// SetHasPublicIpV4 gets a reference to the given bool and assigns it to the HasPublicIpV4 field.
func (o *Instance) SetHasPublicIpV4(v bool) {
	o.HasPublicIpV4 = &v
}

// GetincludesPrivateNetwork returns the includesPrivateNetwork field value if set, zero value otherwise.
func (o *Instance) GetincludesPrivateNetwork() bool {
	if o == nil || IsNil(o.includesPrivateNetwork) {
		var ret bool
		return ret
	}
	return *o.includesPrivateNetwork
}

// GetincludesPrivateNetworkOk returns a tuple with the includesPrivateNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetincludesPrivateNetworkOk() (*bool, bool) {
	if o == nil || IsNil(o.includesPrivateNetwork) {
		return nil, false
	}
	return o.includesPrivateNetwork, true
}

// HasincludesPrivateNetwork returns a boolean if a field has been set.
func (o *Instance) HasincludesPrivateNetwork() bool {
	if o != nil && !IsNil(o.includesPrivateNetwork) {
		return true
	}

	return false
}

// SetincludesPrivateNetwork gets a reference to the given bool and assigns it to the includesPrivateNetwork field.
func (o *Instance) SetincludesPrivateNetwork(v bool) {
	o.includesPrivateNetwork = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Instance) GetType() InstanceTypeName {
	if o == nil || IsNil(o.Type) {
		var ret InstanceTypeName
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetTypeOk() (*InstanceTypeName, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Instance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given InstanceTypeName and assigns it to the Type field.
func (o *Instance) SetType(v InstanceTypeName) {
	o.Type = &v
}

// GetRootDiskSize returns the RootDiskSize field value if set, zero value otherwise.
func (o *Instance) GetRootDiskSize() int32 {
	if o == nil || IsNil(o.RootDiskSize) {
		var ret int32
		return ret
	}
	return *o.RootDiskSize
}

// GetRootDiskSizeOk returns a tuple with the RootDiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetRootDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.RootDiskSize) {
		return nil, false
	}
	return o.RootDiskSize, true
}

// HasRootDiskSize returns a boolean if a field has been set.
func (o *Instance) HasRootDiskSize() bool {
	if o != nil && !IsNil(o.RootDiskSize) {
		return true
	}

	return false
}

// SetRootDiskSize gets a reference to the given int32 and assigns it to the RootDiskSize field.
func (o *Instance) SetRootDiskSize(v int32) {
	o.RootDiskSize = &v
}

// GetRootDiskStorageType returns the RootDiskStorageType field value if set, zero value otherwise.
func (o *Instance) GetRootDiskStorageType() string {
	if o == nil || IsNil(o.RootDiskStorageType) {
		var ret string
		return ret
	}
	return *o.RootDiskStorageType
}

// GetRootDiskStorageTypeOk returns a tuple with the RootDiskStorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetRootDiskStorageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RootDiskStorageType) {
		return nil, false
	}
	return o.RootDiskStorageType, true
}

// HasRootDiskStorageType returns a boolean if a field has been set.
func (o *Instance) HasRootDiskStorageType() bool {
	if o != nil && !IsNil(o.RootDiskStorageType) {
		return true
	}

	return false
}

// SetRootDiskStorageType gets a reference to the given string and assigns it to the RootDiskStorageType field.
func (o *Instance) SetRootDiskStorageType(v string) {
	o.RootDiskStorageType = &v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *Instance) GetIps() []Ip {
	if o == nil || IsNil(o.Ips) {
		var ret []Ip
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetIpsOk() ([]Ip, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *Instance) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []Ip and assigns it to the Ips field.
func (o *Instance) SetIps(v []Ip) {
	o.Ips = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// HasStartedAt returns a boolean if a field has been set.
func (o *Instance) HasStartedAt() bool {
	if o != nil && o.StartedAt.IsSet() {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given NullableTime and assigns it to the StartedAt field.
func (o *Instance) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}
// SetStartedAtNil sets the value for StartedAt to be an explicit nil
func (o *Instance) SetStartedAtNil() {
	o.StartedAt.Set(nil)
}

// UnsetStartedAt ensures that no value is present for StartedAt, not even an explicit nil
func (o *Instance) UnsetStartedAt() {
	o.StartedAt.Unset()
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *Instance) GetContract() Contract {
	if o == nil || IsNil(o.Contract) {
		var ret Contract
		return ret
	}
	return *o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetContractOk() (*Contract, bool) {
	if o == nil || IsNil(o.Contract) {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *Instance) HasContract() bool {
	if o != nil && !IsNil(o.Contract) {
		return true
	}

	return false
}

// SetContract gets a reference to the given Contract and assigns it to the Contract field.
func (o *Instance) SetContract(v Contract) {
	o.Contract = &v
}

// GetIso returns the Iso field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetIso() Iso {
	if o == nil || IsNil(o.Iso.Get()) {
		var ret Iso
		return ret
	}
	return *o.Iso.Get()
}

// GetIsoOk returns a tuple with the Iso field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetIsoOk() (*Iso, bool) {
	if o == nil {
		return nil, false
	}
	return o.Iso.Get(), o.Iso.IsSet()
}

// HasIso returns a boolean if a field has been set.
func (o *Instance) HasIso() bool {
	if o != nil && o.Iso.IsSet() {
		return true
	}

	return false
}

// SetIso gets a reference to the given NullableIso and assigns it to the Iso field.
func (o *Instance) SetIso(v Iso) {
	o.Iso.Set(&v)
}
// SetIsoNil sets the value for Iso to be an explicit nil
func (o *Instance) SetIsoNil() {
	o.Iso.Set(nil)
}

// UnsetIso ensures that no value is present for Iso, not even an explicit nil
func (o *Instance) UnsetIso() {
	o.Iso.Unset()
}

// GetMarketAppId returns the MarketAppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetMarketAppId() string {
	if o == nil || IsNil(o.MarketAppId.Get()) {
		var ret string
		return ret
	}
	return *o.MarketAppId.Get()
}

// GetMarketAppIdOk returns a tuple with the MarketAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetMarketAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarketAppId.Get(), o.MarketAppId.IsSet()
}

// HasMarketAppId returns a boolean if a field has been set.
func (o *Instance) HasMarketAppId() bool {
	if o != nil && o.MarketAppId.IsSet() {
		return true
	}

	return false
}

// SetMarketAppId gets a reference to the given NullableString and assigns it to the MarketAppId field.
func (o *Instance) SetMarketAppId(v string) {
	o.MarketAppId.Set(&v)
}
// SetMarketAppIdNil sets the value for MarketAppId to be an explicit nil
func (o *Instance) SetMarketAppIdNil() {
	o.MarketAppId.Set(nil)
}

// UnsetMarketAppId ensures that no value is present for MarketAppId, not even an explicit nil
func (o *Instance) UnsetMarketAppId() {
	o.MarketAppId.Unset()
}

// GetPrivateNetwork returns the PrivateNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetPrivateNetwork() PrivateNetwork {
	if o == nil || IsNil(o.PrivateNetwork.Get()) {
		var ret PrivateNetwork
		return ret
	}
	return *o.PrivateNetwork.Get()
}

// GetPrivateNetworkOk returns a tuple with the PrivateNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetPrivateNetworkOk() (*PrivateNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateNetwork.Get(), o.PrivateNetwork.IsSet()
}

// HasPrivateNetwork returns a boolean if a field has been set.
func (o *Instance) HasPrivateNetwork() bool {
	if o != nil && o.PrivateNetwork.IsSet() {
		return true
	}

	return false
}

// SetPrivateNetwork gets a reference to the given NullablePrivateNetwork and assigns it to the PrivateNetwork field.
func (o *Instance) SetPrivateNetwork(v PrivateNetwork) {
	o.PrivateNetwork.Set(&v)
}
// SetPrivateNetworkNil sets the value for PrivateNetwork to be an explicit nil
func (o *Instance) SetPrivateNetworkNil() {
	o.PrivateNetwork.Set(nil)
}

// UnsetPrivateNetwork ensures that no value is present for PrivateNetwork, not even an explicit nil
func (o *Instance) UnsetPrivateNetwork() {
	o.PrivateNetwork.Unset()
}

func (o Instance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Instance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EquipmentId) {
		toSerialize["equipmentId"] = o.EquipmentId
	}
	if !IsNil(o.SalesOrgId) {
		toSerialize["salesOrgId"] = o.SalesOrgId
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operatingSystem"] = o.OperatingSystem
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	if !IsNil(o.HasPublicIpV4) {
		toSerialize["hasPublicIpV4"] = o.HasPublicIpV4
	}
	if !IsNil(o.includesPrivateNetwork) {
		toSerialize["hasPrivateNetwork"] = o.includesPrivateNetwork
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RootDiskSize) {
		toSerialize["rootDiskSize"] = o.RootDiskSize
	}
	if !IsNil(o.RootDiskStorageType) {
		toSerialize["rootDiskStorageType"] = o.RootDiskStorageType
	}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}
	if o.StartedAt.IsSet() {
		toSerialize["startedAt"] = o.StartedAt.Get()
	}
	if !IsNil(o.Contract) {
		toSerialize["contract"] = o.Contract
	}
	if o.Iso.IsSet() {
		toSerialize["iso"] = o.Iso.Get()
	}
	if o.MarketAppId.IsSet() {
		toSerialize["marketAppId"] = o.MarketAppId.Get()
	}
	if o.PrivateNetwork.IsSet() {
		toSerialize["privateNetwork"] = o.PrivateNetwork.Get()
	}
	return toSerialize, nil
}

type NullableInstance struct {
	value *Instance
	isSet bool
}

func (v NullableInstance) Get() *Instance {
	return v.value
}

func (v *NullableInstance) Set(val *Instance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstance(val *Instance) *NullableInstance {
	return &NullableInstance{value: val, isSet: true}
}

func (v NullableInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


