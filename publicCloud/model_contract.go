/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"time"
)

// checks if the Contract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contract{}

// Contract struct for Contract
type Contract struct {
	// The billing frequency (in months) of the instance.
	BillingFrequency *int32 `json:"billingFrequency,omitempty"`
	// The contract commitment (in months)
	Term *int32 `json:"term,omitempty"`
	Type *ContractType `json:"type,omitempty"`
	EndsAt NullableTime `json:"endsAt,omitempty"`
	// Date when the contract will be automatically renewed
	RenewalsAt *time.Time `json:"renewalsAt,omitempty"`
	// Date when the contract was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	State *ContractState `json:"state,omitempty"`
}

// NewContract instantiates a new Contract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContract() *Contract {
	this := Contract{}
	return &this
}

// NewContractWithDefaults instantiates a new Contract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractWithDefaults() *Contract {
	this := Contract{}
	return &this
}

// GetBillingFrequency returns the BillingFrequency field value if set, zero value otherwise.
func (o *Contract) GetBillingFrequency() int32 {
	if o == nil || IsNil(o.BillingFrequency) {
		var ret int32
		return ret
	}
	return *o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetBillingFrequencyOk() (*int32, bool) {
	if o == nil || IsNil(o.BillingFrequency) {
		return nil, false
	}
	return o.BillingFrequency, true
}

// HasBillingFrequency returns a boolean if a field has been set.
func (o *Contract) HasBillingFrequency() bool {
	if o != nil && !IsNil(o.BillingFrequency) {
		return true
	}

	return false
}

// SetBillingFrequency gets a reference to the given int32 and assigns it to the BillingFrequency field.
func (o *Contract) SetBillingFrequency(v int32) {
	o.BillingFrequency = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *Contract) GetTerm() int32 {
	if o == nil || IsNil(o.Term) {
		var ret int32
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTermOk() (*int32, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *Contract) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given int32 and assigns it to the Term field.
func (o *Contract) SetTerm(v int32) {
	o.Term = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Contract) GetType() ContractType {
	if o == nil || IsNil(o.Type) {
		var ret ContractType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTypeOk() (*ContractType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Contract) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ContractType and assigns it to the Type field.
func (o *Contract) SetType(v ContractType) {
	o.Type = &v
}

// GetEndsAt returns the EndsAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetEndsAt() time.Time {
	if o == nil || IsNil(o.EndsAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndsAt.Get()
}

// GetEndsAtOk returns a tuple with the EndsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetEndsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndsAt.Get(), o.EndsAt.IsSet()
}

// HasEndsAt returns a boolean if a field has been set.
func (o *Contract) HasEndsAt() bool {
	if o != nil && o.EndsAt.IsSet() {
		return true
	}

	return false
}

// SetEndsAt gets a reference to the given NullableTime and assigns it to the EndsAt field.
func (o *Contract) SetEndsAt(v time.Time) {
	o.EndsAt.Set(&v)
}
// SetEndsAtNil sets the value for EndsAt to be an explicit nil
func (o *Contract) SetEndsAtNil() {
	o.EndsAt.Set(nil)
}

// UnsetEndsAt ensures that no value is present for EndsAt, not even an explicit nil
func (o *Contract) UnsetEndsAt() {
	o.EndsAt.Unset()
}

// GetRenewalsAt returns the RenewalsAt field value if set, zero value otherwise.
func (o *Contract) GetRenewalsAt() time.Time {
	if o == nil || IsNil(o.RenewalsAt) {
		var ret time.Time
		return ret
	}
	return *o.RenewalsAt
}

// GetRenewalsAtOk returns a tuple with the RenewalsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetRenewalsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalsAt) {
		return nil, false
	}
	return o.RenewalsAt, true
}

// HasRenewalsAt returns a boolean if a field has been set.
func (o *Contract) HasRenewalsAt() bool {
	if o != nil && !IsNil(o.RenewalsAt) {
		return true
	}

	return false
}

// SetRenewalsAt gets a reference to the given time.Time and assigns it to the RenewalsAt field.
func (o *Contract) SetRenewalsAt(v time.Time) {
	o.RenewalsAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Contract) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Contract) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Contract) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Contract) GetState() ContractState {
	if o == nil || IsNil(o.State) {
		var ret ContractState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetStateOk() (*ContractState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Contract) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ContractState and assigns it to the State field.
func (o *Contract) SetState(v ContractState) {
	o.State = &v
}

func (o Contract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingFrequency) {
		toSerialize["billingFrequency"] = o.BillingFrequency
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.EndsAt.IsSet() {
		toSerialize["endsAt"] = o.EndsAt.Get()
	}
	if !IsNil(o.RenewalsAt) {
		toSerialize["renewalsAt"] = o.RenewalsAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableContract struct {
	value *Contract
	isSet bool
}

func (v NullableContract) Get() *Contract {
	return v.value
}

func (v *NullableContract) Set(val *Contract) {
	v.value = val
	v.isSet = true
}

func (v NullableContract) IsSet() bool {
	return v.isSet
}

func (v *NullableContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContract(val *Contract) *NullableContract {
	return &NullableContract{value: val, isSet: true}
}

func (v NullableContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


