/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the Target type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Target{}

// Target struct for Target
type Target struct {
	// The instance unique identifier
	Id *string `json:"id,omitempty"`
	// The identifying name set to the instance
	Reference *string `json:"reference,omitempty"`
	OperatingSystem *OperatingSystem `json:"operatingSystem,omitempty"`
	State *InstanceState `json:"state,omitempty"`
	HealthCheckStatus *HealthCheckStatus `json:"healthCheckStatus,omitempty"`
	Ips []Ip `json:"ips,omitempty"`
}

// NewTarget instantiates a new Target object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTarget() *Target {
	this := Target{}
	return &this
}

// NewTargetWithDefaults instantiates a new Target object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetWithDefaults() *Target {
	this := Target{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Target) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Target) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Target) SetId(v string) {
	o.Id = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Target) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Target) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Target) SetReference(v string) {
	o.Reference = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *Target) GetOperatingSystem() OperatingSystem {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret OperatingSystem
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetOperatingSystemOk() (*OperatingSystem, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *Target) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given OperatingSystem and assigns it to the OperatingSystem field.
func (o *Target) SetOperatingSystem(v OperatingSystem) {
	o.OperatingSystem = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Target) GetState() InstanceState {
	if o == nil || IsNil(o.State) {
		var ret InstanceState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetStateOk() (*InstanceState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Target) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given InstanceState and assigns it to the State field.
func (o *Target) SetState(v InstanceState) {
	o.State = &v
}

// GetHealthCheckStatus returns the HealthCheckStatus field value if set, zero value otherwise.
func (o *Target) GetHealthCheckStatus() HealthCheckStatus {
	if o == nil || IsNil(o.HealthCheckStatus) {
		var ret HealthCheckStatus
		return ret
	}
	return *o.HealthCheckStatus
}

// GetHealthCheckStatusOk returns a tuple with the HealthCheckStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetHealthCheckStatusOk() (*HealthCheckStatus, bool) {
	if o == nil || IsNil(o.HealthCheckStatus) {
		return nil, false
	}
	return o.HealthCheckStatus, true
}

// HasHealthCheckStatus returns a boolean if a field has been set.
func (o *Target) HasHealthCheckStatus() bool {
	if o != nil && !IsNil(o.HealthCheckStatus) {
		return true
	}

	return false
}

// SetHealthCheckStatus gets a reference to the given HealthCheckStatus and assigns it to the HealthCheckStatus field.
func (o *Target) SetHealthCheckStatus(v HealthCheckStatus) {
	o.HealthCheckStatus = &v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *Target) GetIps() []Ip {
	if o == nil || IsNil(o.Ips) {
		var ret []Ip
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetIpsOk() ([]Ip, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *Target) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []Ip and assigns it to the Ips field.
func (o *Target) SetIps(v []Ip) {
	o.Ips = v
}

func (o Target) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Target) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operatingSystem"] = o.OperatingSystem
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.HealthCheckStatus) {
		toSerialize["healthCheckStatus"] = o.HealthCheckStatus
	}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}
	return toSerialize, nil
}

type NullableTarget struct {
	value *Target
	isSet bool
}

func (v NullableTarget) Get() *Target {
	return v.value
}

func (v *NullableTarget) Set(val *Target) {
	v.value = val
	v.isSet = true
}

func (v NullableTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTarget(val *Target) *NullableTarget {
	return &NullableTarget{value: val, isSet: true}
}

func (v NullableTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


