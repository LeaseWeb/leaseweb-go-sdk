/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the Local type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Local{}

// Local struct for Local
type Local struct {
	HourlyPrice *string `json:"hourlyPrice,omitempty"`
	MonthlyPrice *string `json:"monthlyPrice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Local Local

// NewLocal instantiates a new Local object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocal() *Local {
	this := Local{}
	return &this
}

// NewLocalWithDefaults instantiates a new Local object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalWithDefaults() *Local {
	this := Local{}
	return &this
}

// GetHourlyPrice returns the HourlyPrice field value if set, zero value otherwise.
func (o *Local) GetHourlyPrice() string {
	if o == nil || IsNil(o.HourlyPrice) {
		var ret string
		return ret
	}
	return *o.HourlyPrice
}

// GetHourlyPriceOk returns a tuple with the HourlyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Local) GetHourlyPriceOk() (*string, bool) {
	if o == nil || IsNil(o.HourlyPrice) {
		return nil, false
	}
	return o.HourlyPrice, true
}

// HasHourlyPrice returns a boolean if a field has been set.
func (o *Local) HasHourlyPrice() bool {
	if o != nil && !IsNil(o.HourlyPrice) {
		return true
	}

	return false
}

// SetHourlyPrice gets a reference to the given string and assigns it to the HourlyPrice field.
func (o *Local) SetHourlyPrice(v string) {
	o.HourlyPrice = &v
}

// GetMonthlyPrice returns the MonthlyPrice field value if set, zero value otherwise.
func (o *Local) GetMonthlyPrice() string {
	if o == nil || IsNil(o.MonthlyPrice) {
		var ret string
		return ret
	}
	return *o.MonthlyPrice
}

// GetMonthlyPriceOk returns a tuple with the MonthlyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Local) GetMonthlyPriceOk() (*string, bool) {
	if o == nil || IsNil(o.MonthlyPrice) {
		return nil, false
	}
	return o.MonthlyPrice, true
}

// HasMonthlyPrice returns a boolean if a field has been set.
func (o *Local) HasMonthlyPrice() bool {
	if o != nil && !IsNil(o.MonthlyPrice) {
		return true
	}

	return false
}

// SetMonthlyPrice gets a reference to the given string and assigns it to the MonthlyPrice field.
func (o *Local) SetMonthlyPrice(v string) {
	o.MonthlyPrice = &v
}

func (o Local) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Local) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HourlyPrice) {
		toSerialize["hourlyPrice"] = o.HourlyPrice
	}
	if !IsNil(o.MonthlyPrice) {
		toSerialize["monthlyPrice"] = o.MonthlyPrice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Local) UnmarshalJSON(data []byte) (err error) {
	varLocal := _Local{}

	err = json.Unmarshal(data, &varLocal)

	if err != nil {
		return err
	}

	*o = Local(varLocal)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hourlyPrice")
		delete(additionalProperties, "monthlyPrice")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocal struct {
	value *Local
	isSet bool
}

func (v NullableLocal) Get() *Local {
	return v.value
}

func (v *NullableLocal) Set(val *Local) {
	v.value = val
	v.isSet = true
}

func (v NullableLocal) IsSet() bool {
	return v.isSet
}

func (v *NullableLocal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocal(val *Local) *NullableLocal {
	return &NullableLocal{value: val, isSet: true}
}

func (v NullableLocal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


