/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstanceResources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceResources{}

// InstanceResources Resources available for the load balancer
type InstanceResources struct {
	Cpu Cpu `json:"cpu"`
	Memory Memory `json:"memory"`
	PublicNetworkSpeed NetworkSpeed `json:"publicNetworkSpeed"`
	PrivateNetworkSpeed NetworkSpeed `json:"privateNetworkSpeed"`
}

type _InstanceResources InstanceResources

// NewInstanceResources instantiates a new InstanceResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceResources(cpu Cpu, memory Memory, publicNetworkSpeed NetworkSpeed, privateNetworkSpeed NetworkSpeed) *InstanceResources {
	this := InstanceResources{}
	this.Cpu = cpu
	this.Memory = memory
	this.PublicNetworkSpeed = publicNetworkSpeed
	this.PrivateNetworkSpeed = privateNetworkSpeed
	return &this
}

// NewInstanceResourcesWithDefaults instantiates a new InstanceResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceResourcesWithDefaults() *InstanceResources {
	this := InstanceResources{}
	return &this
}

// GetCpu returns the Cpu field value
func (o *InstanceResources) GetCpu() Cpu {
	if o == nil {
		var ret Cpu
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *InstanceResources) GetCpuOk() (*Cpu, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *InstanceResources) SetCpu(v Cpu) {
	o.Cpu = v
}

// GetMemory returns the Memory field value
func (o *InstanceResources) GetMemory() Memory {
	if o == nil {
		var ret Memory
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *InstanceResources) GetMemoryOk() (*Memory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *InstanceResources) SetMemory(v Memory) {
	o.Memory = v
}

// GetPublicNetworkSpeed returns the PublicNetworkSpeed field value
func (o *InstanceResources) GetPublicNetworkSpeed() NetworkSpeed {
	if o == nil {
		var ret NetworkSpeed
		return ret
	}

	return o.PublicNetworkSpeed
}

// GetPublicNetworkSpeedOk returns a tuple with the PublicNetworkSpeed field value
// and a boolean to check if the value has been set.
func (o *InstanceResources) GetPublicNetworkSpeedOk() (*NetworkSpeed, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicNetworkSpeed, true
}

// SetPublicNetworkSpeed sets field value
func (o *InstanceResources) SetPublicNetworkSpeed(v NetworkSpeed) {
	o.PublicNetworkSpeed = v
}

// GetPrivateNetworkSpeed returns the PrivateNetworkSpeed field value
func (o *InstanceResources) GetPrivateNetworkSpeed() NetworkSpeed {
	if o == nil {
		var ret NetworkSpeed
		return ret
	}

	return o.PrivateNetworkSpeed
}

// GetPrivateNetworkSpeedOk returns a tuple with the PrivateNetworkSpeed field value
// and a boolean to check if the value has been set.
func (o *InstanceResources) GetPrivateNetworkSpeedOk() (*NetworkSpeed, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateNetworkSpeed, true
}

// SetPrivateNetworkSpeed sets field value
func (o *InstanceResources) SetPrivateNetworkSpeed(v NetworkSpeed) {
	o.PrivateNetworkSpeed = v
}

func (o InstanceResources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceResources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu"] = o.Cpu
	toSerialize["memory"] = o.Memory
	toSerialize["publicNetworkSpeed"] = o.PublicNetworkSpeed
	toSerialize["privateNetworkSpeed"] = o.PrivateNetworkSpeed
	return toSerialize, nil
}

func (o *InstanceResources) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"memory",
		"publicNetworkSpeed",
		"privateNetworkSpeed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceResources := _InstanceResources{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstanceResources)

	if err != nil {
		return err
	}

	*o = InstanceResources(varInstanceResources)

	return err
}

type NullableInstanceResources struct {
	value *InstanceResources
	isSet bool
}

func (v NullableInstanceResources) Get() *InstanceResources {
	return v.value
}

func (v *NullableInstanceResources) Set(val *InstanceResources) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceResources) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceResources(val *InstanceResources) *NullableInstanceResources {
	return &NullableInstanceResources{value: val, isSet: true}
}

func (v NullableInstanceResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


