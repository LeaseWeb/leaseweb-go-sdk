/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the InstanceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceType{}

// InstanceType struct for InstanceType
type InstanceType struct {
	// Instance type's name
	Name *string `json:"name,omitempty"`
	Resources *Resources `json:"resources,omitempty"`
	// The supported storage types for the instance type
	StorageTypes []string `json:"storageTypes,omitempty"`
	Prices *Price `json:"prices,omitempty"`
}

// NewInstanceType instantiates a new InstanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceType() *InstanceType {
	this := InstanceType{}
	return &this
}

// NewInstanceTypeWithDefaults instantiates a new InstanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeWithDefaults() *InstanceType {
	this := InstanceType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceType) SetName(v string) {
	o.Name = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *InstanceType) GetResources() Resources {
	if o == nil || IsNil(o.Resources) {
		var ret Resources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetResourcesOk() (*Resources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *InstanceType) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given Resources and assigns it to the Resources field.
func (o *InstanceType) SetResources(v Resources) {
	o.Resources = &v
}

// GetStorageTypes returns the StorageTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceType) GetStorageTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.StorageTypes
}

// GetStorageTypesOk returns a tuple with the StorageTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceType) GetStorageTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.StorageTypes) {
		return nil, false
	}
	return o.StorageTypes, true
}

// HasStorageTypes returns a boolean if a field has been set.
func (o *InstanceType) HasStorageTypes() bool {
	if o != nil && !IsNil(o.StorageTypes) {
		return true
	}

	return false
}

// SetStorageTypes gets a reference to the given []string and assigns it to the StorageTypes field.
func (o *InstanceType) SetStorageTypes(v []string) {
	o.StorageTypes = v
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *InstanceType) GetPrices() Price {
	if o == nil || IsNil(o.Prices) {
		var ret Price
		return ret
	}
	return *o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetPricesOk() (*Price, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *InstanceType) HasPrices() bool {
	if o != nil && !IsNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given Price and assigns it to the Prices field.
func (o *InstanceType) SetPrices(v Price) {
	o.Prices = &v
}

func (o InstanceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if o.StorageTypes != nil {
		toSerialize["storageTypes"] = o.StorageTypes
	}
	if !IsNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	return toSerialize, nil
}

type NullableInstanceType struct {
	value *InstanceType
	isSet bool
}

func (v NullableInstanceType) Get() *InstanceType {
	return v.value
}

func (v *NullableInstanceType) Set(val *InstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceType(val *InstanceType) *NullableInstanceType {
	return &NullableInstanceType{value: val, isSet: true}
}

func (v NullableInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


