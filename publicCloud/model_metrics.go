/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the Metrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metrics{}

// Metrics struct for Metrics
type Metrics struct {
	DOWN_PUBLIC *TrafficMetric `json:"DOWN_PUBLIC,omitempty"`
	UP_PUBLIC *TrafficMetric `json:"UP_PUBLIC,omitempty"`
}

// NewMetrics instantiates a new Metrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetrics() *Metrics {
	this := Metrics{}
	return &this
}

// NewMetricsWithDefaults instantiates a new Metrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsWithDefaults() *Metrics {
	this := Metrics{}
	return &this
}

// GetDOWN_PUBLIC returns the DOWN_PUBLIC field value if set, zero value otherwise.
func (o *Metrics) GetDOWN_PUBLIC() TrafficMetric {
	if o == nil || IsNil(o.DOWN_PUBLIC) {
		var ret TrafficMetric
		return ret
	}
	return *o.DOWN_PUBLIC
}

// GetDOWN_PUBLICOk returns a tuple with the DOWN_PUBLIC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetDOWN_PUBLICOk() (*TrafficMetric, bool) {
	if o == nil || IsNil(o.DOWN_PUBLIC) {
		return nil, false
	}
	return o.DOWN_PUBLIC, true
}

// HasDOWN_PUBLIC returns a boolean if a field has been set.
func (o *Metrics) HasDOWN_PUBLIC() bool {
	if o != nil && !IsNil(o.DOWN_PUBLIC) {
		return true
	}

	return false
}

// SetDOWN_PUBLIC gets a reference to the given TrafficMetric and assigns it to the DOWN_PUBLIC field.
func (o *Metrics) SetDOWN_PUBLIC(v TrafficMetric) {
	o.DOWN_PUBLIC = &v
}

// GetUP_PUBLIC returns the UP_PUBLIC field value if set, zero value otherwise.
func (o *Metrics) GetUP_PUBLIC() TrafficMetric {
	if o == nil || IsNil(o.UP_PUBLIC) {
		var ret TrafficMetric
		return ret
	}
	return *o.UP_PUBLIC
}

// GetUP_PUBLICOk returns a tuple with the UP_PUBLIC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetUP_PUBLICOk() (*TrafficMetric, bool) {
	if o == nil || IsNil(o.UP_PUBLIC) {
		return nil, false
	}
	return o.UP_PUBLIC, true
}

// HasUP_PUBLIC returns a boolean if a field has been set.
func (o *Metrics) HasUP_PUBLIC() bool {
	if o != nil && !IsNil(o.UP_PUBLIC) {
		return true
	}

	return false
}

// SetUP_PUBLIC gets a reference to the given TrafficMetric and assigns it to the UP_PUBLIC field.
func (o *Metrics) SetUP_PUBLIC(v TrafficMetric) {
	o.UP_PUBLIC = &v
}

func (o Metrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DOWN_PUBLIC) {
		toSerialize["DOWN_PUBLIC"] = o.DOWN_PUBLIC
	}
	if !IsNil(o.UP_PUBLIC) {
		toSerialize["UP_PUBLIC"] = o.UP_PUBLIC
	}
	return toSerialize, nil
}

type NullableMetrics struct {
	value *Metrics
	isSet bool
}

func (v NullableMetrics) Get() *Metrics {
	return v.value
}

func (v *NullableMetrics) Set(val *Metrics) {
	v.value = val
	v.isSet = true
}

func (v NullableMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetrics(val *Metrics) *NullableMetrics {
	return &NullableMetrics{value: val, isSet: true}
}

func (v NullableMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


