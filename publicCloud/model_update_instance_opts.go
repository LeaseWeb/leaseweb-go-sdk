/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the UpdateInstanceOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInstanceOpts{}

// UpdateInstanceOpts struct for UpdateInstanceOpts
type UpdateInstanceOpts struct {
	Type *InstanceTypeName `json:"type,omitempty"`
	// An identifying name you can refer to the instance
	Reference *string `json:"reference,omitempty"`
	ContractType *string `json:"contractType,omitempty"`
	// Contract commitment. Can only be used when updating the contract type from HOURLY and MONTHLY.
	ContractTerm *int32 `json:"contractTerm,omitempty"`
	// How often you wish to be charged. Can only be used when updating the contract type from HOURLY to MONTHLY. '1' means every month, '3' every three months and so on.
	BillingFrequency *int32 `json:"billingFrequency,omitempty"`
	// The root disk's size in GB. Must be at least 5 GB for Linux and FreeBSD instances and 50 GB for Windows instances
	RootDiskSize *int32 `json:"rootDiskSize,omitempty"`
}

// NewUpdateInstanceOpts instantiates a new UpdateInstanceOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInstanceOpts() *UpdateInstanceOpts {
	this := UpdateInstanceOpts{}
	return &this
}

// NewUpdateInstanceOptsWithDefaults instantiates a new UpdateInstanceOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInstanceOptsWithDefaults() *UpdateInstanceOpts {
	this := UpdateInstanceOpts{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateInstanceOpts) GetType() InstanceTypeName {
	if o == nil || IsNil(o.Type) {
		var ret InstanceTypeName
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstanceOpts) GetTypeOk() (*InstanceTypeName, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateInstanceOpts) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given InstanceTypeName and assigns it to the Type field.
func (o *UpdateInstanceOpts) SetType(v InstanceTypeName) {
	o.Type = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *UpdateInstanceOpts) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstanceOpts) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *UpdateInstanceOpts) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *UpdateInstanceOpts) SetReference(v string) {
	o.Reference = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *UpdateInstanceOpts) GetContractType() string {
	if o == nil || IsNil(o.ContractType) {
		var ret string
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstanceOpts) GetContractTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *UpdateInstanceOpts) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given string and assigns it to the ContractType field.
func (o *UpdateInstanceOpts) SetContractType(v string) {
	o.ContractType = &v
}

// GetContractTerm returns the ContractTerm field value if set, zero value otherwise.
func (o *UpdateInstanceOpts) GetContractTerm() int32 {
	if o == nil || IsNil(o.ContractTerm) {
		var ret int32
		return ret
	}
	return *o.ContractTerm
}

// GetContractTermOk returns a tuple with the ContractTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstanceOpts) GetContractTermOk() (*int32, bool) {
	if o == nil || IsNil(o.ContractTerm) {
		return nil, false
	}
	return o.ContractTerm, true
}

// HasContractTerm returns a boolean if a field has been set.
func (o *UpdateInstanceOpts) HasContractTerm() bool {
	if o != nil && !IsNil(o.ContractTerm) {
		return true
	}

	return false
}

// SetContractTerm gets a reference to the given int32 and assigns it to the ContractTerm field.
func (o *UpdateInstanceOpts) SetContractTerm(v int32) {
	o.ContractTerm = &v
}

// GetBillingFrequency returns the BillingFrequency field value if set, zero value otherwise.
func (o *UpdateInstanceOpts) GetBillingFrequency() int32 {
	if o == nil || IsNil(o.BillingFrequency) {
		var ret int32
		return ret
	}
	return *o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstanceOpts) GetBillingFrequencyOk() (*int32, bool) {
	if o == nil || IsNil(o.BillingFrequency) {
		return nil, false
	}
	return o.BillingFrequency, true
}

// HasBillingFrequency returns a boolean if a field has been set.
func (o *UpdateInstanceOpts) HasBillingFrequency() bool {
	if o != nil && !IsNil(o.BillingFrequency) {
		return true
	}

	return false
}

// SetBillingFrequency gets a reference to the given int32 and assigns it to the BillingFrequency field.
func (o *UpdateInstanceOpts) SetBillingFrequency(v int32) {
	o.BillingFrequency = &v
}

// GetRootDiskSize returns the RootDiskSize field value if set, zero value otherwise.
func (o *UpdateInstanceOpts) GetRootDiskSize() int32 {
	if o == nil || IsNil(o.RootDiskSize) {
		var ret int32
		return ret
	}
	return *o.RootDiskSize
}

// GetRootDiskSizeOk returns a tuple with the RootDiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstanceOpts) GetRootDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.RootDiskSize) {
		return nil, false
	}
	return o.RootDiskSize, true
}

// HasRootDiskSize returns a boolean if a field has been set.
func (o *UpdateInstanceOpts) HasRootDiskSize() bool {
	if o != nil && !IsNil(o.RootDiskSize) {
		return true
	}

	return false
}

// SetRootDiskSize gets a reference to the given int32 and assigns it to the RootDiskSize field.
func (o *UpdateInstanceOpts) SetRootDiskSize(v int32) {
	o.RootDiskSize = &v
}

func (o UpdateInstanceOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateInstanceOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.ContractType) {
		toSerialize["contractType"] = o.ContractType
	}
	if !IsNil(o.ContractTerm) {
		toSerialize["contractTerm"] = o.ContractTerm
	}
	if !IsNil(o.BillingFrequency) {
		toSerialize["billingFrequency"] = o.BillingFrequency
	}
	if !IsNil(o.RootDiskSize) {
		toSerialize["rootDiskSize"] = o.RootDiskSize
	}
	return toSerialize, nil
}

type NullableUpdateInstanceOpts struct {
	value *UpdateInstanceOpts
	isSet bool
}

func (v NullableUpdateInstanceOpts) Get() *UpdateInstanceOpts {
	return v.value
}

func (v *NullableUpdateInstanceOpts) Set(val *UpdateInstanceOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInstanceOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInstanceOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInstanceOpts(val *UpdateInstanceOpts) *NullableUpdateInstanceOpts {
	return &NullableUpdateInstanceOpts{value: val, isSet: true}
}

func (v NullableUpdateInstanceOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInstanceOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


