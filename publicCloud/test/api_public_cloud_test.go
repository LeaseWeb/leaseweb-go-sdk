/*
LeaseWeb API for launching and managing Public Cloud instances

Testing PublicCloudAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package publicCloud

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/publicCloud"
)

func Test_publicCloud_PublicCloudAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PublicCloudAPIService AttachIso", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.AttachIso(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CancelInstanceTermination", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.CancelInstanceTermination(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CreateFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.CreateFirewallRules(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CredentialsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.CredentialsDelete(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeleteCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ string
		var username string

		httpRes, err := apiClient.PublicCloudAPI.DeleteCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeleteFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.DeleteFirewallRules(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DetachIso", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.DetachIso(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService EditFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.EditFirewallRules(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetConsoleAccessToInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetConsoleAccessToInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ string
		var username string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetCredentialList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetCredentialListByType(context.Background(), instanceId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetExpenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var equipmentId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetExpenses(context.Background(), equipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetFirewallRuleList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetFirewallRuleList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetInstanceTypeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetInstanceTypeList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetIsoList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetIsoList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetMarketAppList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetMarketAppList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetOperatingSystemList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetOperatingSystemList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetReinstallOsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetReinstallOsList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetUpdateInstanceTypeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetUpdateInstanceTypeList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService InstanceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.InstanceList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService LaunchInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.LaunchInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService RebootInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.RebootInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService RegionsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.RegionsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService ResetPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.ResetPassword(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService StartInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.StartInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService StopInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.StopInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService StoreCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.StoreCredential(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService TerminateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.TerminateInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ string
		var username string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
