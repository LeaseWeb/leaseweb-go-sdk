/*
LeaseWeb API for launching and managing Public Cloud instances

Testing PublicCloudAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package publicCloud

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/publicCloud"
)

func Test_publicCloud_PublicCloudAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PublicCloudAPIService AddToPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.AddToPrivateNetwork(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService AttachIso", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.AttachIso(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CancelInstanceTermination", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.CancelInstanceTermination(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CreateAutoScalingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.CreateAutoScalingGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CreateImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.CreateImage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CreateLoadBalancerListener", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PublicCloudAPI.CreateLoadBalancerListener(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CreateSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.CreateSnapshot(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService CreateTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.CreateTargetGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeleteAutoScalingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		httpRes, err := apiClient.PublicCloudAPI.DeleteAutoScalingGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeleteCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ string
		var username string

		httpRes, err := apiClient.PublicCloudAPI.DeleteCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeleteCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.DeleteCredentials(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeleteLoadBalancerListener", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var listenerId string

		httpRes, err := apiClient.PublicCloudAPI.DeleteLoadBalancerListener(context.Background(), loadBalancerId, listenerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeleteSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		httpRes, err := apiClient.PublicCloudAPI.DeleteSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeleteTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		httpRes, err := apiClient.PublicCloudAPI.DeleteTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeregisterAutoScalingGroupTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		httpRes, err := apiClient.PublicCloudAPI.DeregisterAutoScalingGroupTargetGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DeregisterTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		httpRes, err := apiClient.PublicCloudAPI.DeregisterTargets(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService DetachIso", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.DetachIso(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetAutoScalingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetAutoScalingGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetAutoScalingGroupInstanceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetAutoScalingGroupInstanceList(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetAutoScalingGroupList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetAutoScalingGroupList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetConsoleAccessToInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetConsoleAccessToInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetCpuMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetCpuMetrics(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ string
		var username string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetCredentialList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetCredentialListByType(context.Background(), instanceId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetDataTrafficMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetDataTrafficMetrics(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetExpenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var equipmentId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetExpenses(context.Background(), equipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetImageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetImageList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetInstanceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetInstanceList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetInstanceTypeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetInstanceTypeList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var ip string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetIp(context.Background(), instanceId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetIpList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetIsoList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetIsoList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetLoadBalancerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetLoadBalancerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetLoadBalancerListener", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var listenerId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetLoadBalancerListener(context.Background(), loadBalancerId, listenerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetLoadBalancerListenerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetLoadBalancerListenerList(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetMarketAppList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetMarketAppList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetRegionList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetRegionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetReinstallImageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetReinstallImageList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetSnapshotList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetSnapshotList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetTargetGroupList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.GetTargetGroupList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetTargetList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetTargetList(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService GetUpdateInstanceTypeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.GetUpdateInstanceTypeList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService LaunchInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.LaunchInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService LaunchLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicCloudAPI.LaunchLoadBalancer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService NullRouteIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var ip string

		resp, httpRes, err := apiClient.PublicCloudAPI.NullRouteIp(context.Background(), instanceId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService RebootInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.RebootInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService RegisterAutoScalingGroupTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		httpRes, err := apiClient.PublicCloudAPI.RegisterAutoScalingGroupTargetGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService RegisterTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		httpRes, err := apiClient.PublicCloudAPI.RegisterTargets(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService ReinstallInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.ReinstallInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService RemoveFromPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.RemoveFromPrivateNetwork(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService RemoveIpNullRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var ip string

		resp, httpRes, err := apiClient.PublicCloudAPI.RemoveIpNullRoute(context.Background(), instanceId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService ResetPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.ResetPassword(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService RestoreSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		httpRes, err := apiClient.PublicCloudAPI.RestoreSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService StartInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.StartInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService StopInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.StopInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService StoreCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.StoreCredential(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService TerminateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PublicCloudAPI.TerminateInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService TerminateLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		httpRes, err := apiClient.PublicCloudAPI.TerminateLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateAutoScalingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateAutoScalingGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ string
		var username string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var ip string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateIp(context.Background(), instanceId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateLoadBalancerListener", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var listenerId string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateLoadBalancerListener(context.Background(), loadBalancerId, listenerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicCloudAPIService UpdateTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.PublicCloudAPI.UpdateTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
