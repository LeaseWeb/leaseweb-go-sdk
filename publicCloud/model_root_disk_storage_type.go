/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"fmt"
)

// RootDiskStorageType The root disk's storage type
type RootDiskStorageType string

// List of rootDiskStorageType
const (
	LOCAL RootDiskStorageType = "LOCAL"
	CENTRAL RootDiskStorageType = "CENTRAL"
)

// All allowed values of RootDiskStorageType enum
var AllowedRootDiskStorageTypeEnumValues = []RootDiskStorageType{
	"LOCAL",
	"CENTRAL",
}

func (v *RootDiskStorageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RootDiskStorageType(value)
	for _, existing := range AllowedRootDiskStorageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RootDiskStorageType", value)
}

// NewRootDiskStorageTypeFromValue returns a pointer to a valid RootDiskStorageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRootDiskStorageTypeFromValue(v string) (*RootDiskStorageType, error) {
	ev := RootDiskStorageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RootDiskStorageType: valid values are %v", v, AllowedRootDiskStorageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RootDiskStorageType) IsValid() bool {
	for _, existing := range AllowedRootDiskStorageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rootDiskStorageType value
func (v RootDiskStorageType) Ptr() *RootDiskStorageType {
	return &v
}

type NullableRootDiskStorageType struct {
	value *RootDiskStorageType
	isSet bool
}

func (v NullableRootDiskStorageType) Get() *RootDiskStorageType {
	return v.value
}

func (v *NullableRootDiskStorageType) Set(val *RootDiskStorageType) {
	v.value = val
	v.isSet = true
}

func (v NullableRootDiskStorageType) IsSet() bool {
	return v.isSet
}

func (v *NullableRootDiskStorageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRootDiskStorageType(val *RootDiskStorageType) *NullableRootDiskStorageType {
	return &NullableRootDiskStorageType{value: val, isSet: true}
}

func (v NullableRootDiskStorageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRootDiskStorageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

