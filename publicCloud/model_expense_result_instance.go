/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"time"
)

// checks if the ExpenseResultInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseResultInstance{}

// ExpenseResultInstance struct for ExpenseResultInstance
type ExpenseResultInstance struct {
	// The unique identifier for the instance.
	Id *string `json:"id,omitempty"`
	// The reference of the instance.
	Reference *string `json:"reference,omitempty"`
	Resources *InstanceResources `json:"resources,omitempty"`
	// The contract type of the instance.
	ContractType *string `json:"contractType,omitempty"`
	// Date when the contract was created
	ContractCreatedAt *time.Time `json:"contractCreatedAt,omitempty"`
	// Date when the instance was started
	StartedAt *time.Time `json:"startedAt,omitempty"`
	// The contract term (in months) of the instance.
	ContractTerm *int32 `json:"contractTerm,omitempty"`
	// The billing frequency (in months) of the instance.
	BillingFrequency *int32 `json:"billingFrequency,omitempty"`
	// The root disk size as specified during its launch or update, in GB
	RootDiskSize *int32 `json:"rootDiskSize,omitempty"`
	// The root disk type as specified during its launch or update.
	RootDiskType *string `json:"rootDiskType,omitempty"`
	// The billing type of the instance. PREPAID is used for monthly commited instances, POSTPAID for hourly instances.
	BillingType *string `json:"billingType,omitempty"`
	// The number of hours the instance has been running.
	Hours *int32 `json:"hours,omitempty"`
	// The start date of the billing period.
	From *time.Time `json:"from,omitempty"`
	// The end date of the billing period.
	To *time.Time `json:"to,omitempty"`
	// The price of the instance for the billing period.
	Price *string `json:"price,omitempty"`
}

// NewExpenseResultInstance instantiates a new ExpenseResultInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseResultInstance() *ExpenseResultInstance {
	this := ExpenseResultInstance{}
	return &this
}

// NewExpenseResultInstanceWithDefaults instantiates a new ExpenseResultInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseResultInstanceWithDefaults() *ExpenseResultInstance {
	this := ExpenseResultInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExpenseResultInstance) SetId(v string) {
	o.Id = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ExpenseResultInstance) SetReference(v string) {
	o.Reference = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetResources() InstanceResources {
	if o == nil || IsNil(o.Resources) {
		var ret InstanceResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetResourcesOk() (*InstanceResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given InstanceResources and assigns it to the Resources field.
func (o *ExpenseResultInstance) SetResources(v InstanceResources) {
	o.Resources = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetContractType() string {
	if o == nil || IsNil(o.ContractType) {
		var ret string
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetContractTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given string and assigns it to the ContractType field.
func (o *ExpenseResultInstance) SetContractType(v string) {
	o.ContractType = &v
}

// GetContractCreatedAt returns the ContractCreatedAt field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetContractCreatedAt() time.Time {
	if o == nil || IsNil(o.ContractCreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.ContractCreatedAt
}

// GetContractCreatedAtOk returns a tuple with the ContractCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetContractCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ContractCreatedAt) {
		return nil, false
	}
	return o.ContractCreatedAt, true
}

// HasContractCreatedAt returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasContractCreatedAt() bool {
	if o != nil && !IsNil(o.ContractCreatedAt) {
		return true
	}

	return false
}

// SetContractCreatedAt gets a reference to the given time.Time and assigns it to the ContractCreatedAt field.
func (o *ExpenseResultInstance) SetContractCreatedAt(v time.Time) {
	o.ContractCreatedAt = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *ExpenseResultInstance) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetContractTerm returns the ContractTerm field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetContractTerm() int32 {
	if o == nil || IsNil(o.ContractTerm) {
		var ret int32
		return ret
	}
	return *o.ContractTerm
}

// GetContractTermOk returns a tuple with the ContractTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetContractTermOk() (*int32, bool) {
	if o == nil || IsNil(o.ContractTerm) {
		return nil, false
	}
	return o.ContractTerm, true
}

// HasContractTerm returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasContractTerm() bool {
	if o != nil && !IsNil(o.ContractTerm) {
		return true
	}

	return false
}

// SetContractTerm gets a reference to the given int32 and assigns it to the ContractTerm field.
func (o *ExpenseResultInstance) SetContractTerm(v int32) {
	o.ContractTerm = &v
}

// GetBillingFrequency returns the BillingFrequency field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetBillingFrequency() int32 {
	if o == nil || IsNil(o.BillingFrequency) {
		var ret int32
		return ret
	}
	return *o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetBillingFrequencyOk() (*int32, bool) {
	if o == nil || IsNil(o.BillingFrequency) {
		return nil, false
	}
	return o.BillingFrequency, true
}

// HasBillingFrequency returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasBillingFrequency() bool {
	if o != nil && !IsNil(o.BillingFrequency) {
		return true
	}

	return false
}

// SetBillingFrequency gets a reference to the given int32 and assigns it to the BillingFrequency field.
func (o *ExpenseResultInstance) SetBillingFrequency(v int32) {
	o.BillingFrequency = &v
}

// GetRootDiskSize returns the RootDiskSize field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetRootDiskSize() int32 {
	if o == nil || IsNil(o.RootDiskSize) {
		var ret int32
		return ret
	}
	return *o.RootDiskSize
}

// GetRootDiskSizeOk returns a tuple with the RootDiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetRootDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.RootDiskSize) {
		return nil, false
	}
	return o.RootDiskSize, true
}

// HasRootDiskSize returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasRootDiskSize() bool {
	if o != nil && !IsNil(o.RootDiskSize) {
		return true
	}

	return false
}

// SetRootDiskSize gets a reference to the given int32 and assigns it to the RootDiskSize field.
func (o *ExpenseResultInstance) SetRootDiskSize(v int32) {
	o.RootDiskSize = &v
}

// GetRootDiskType returns the RootDiskType field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetRootDiskType() string {
	if o == nil || IsNil(o.RootDiskType) {
		var ret string
		return ret
	}
	return *o.RootDiskType
}

// GetRootDiskTypeOk returns a tuple with the RootDiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetRootDiskTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RootDiskType) {
		return nil, false
	}
	return o.RootDiskType, true
}

// HasRootDiskType returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasRootDiskType() bool {
	if o != nil && !IsNil(o.RootDiskType) {
		return true
	}

	return false
}

// SetRootDiskType gets a reference to the given string and assigns it to the RootDiskType field.
func (o *ExpenseResultInstance) SetRootDiskType(v string) {
	o.RootDiskType = &v
}

// GetBillingType returns the BillingType field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetBillingType() string {
	if o == nil || IsNil(o.BillingType) {
		var ret string
		return ret
	}
	return *o.BillingType
}

// GetBillingTypeOk returns a tuple with the BillingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetBillingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BillingType) {
		return nil, false
	}
	return o.BillingType, true
}

// HasBillingType returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasBillingType() bool {
	if o != nil && !IsNil(o.BillingType) {
		return true
	}

	return false
}

// SetBillingType gets a reference to the given string and assigns it to the BillingType field.
func (o *ExpenseResultInstance) SetBillingType(v string) {
	o.BillingType = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetHours() int32 {
	if o == nil || IsNil(o.Hours) {
		var ret int32
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given int32 and assigns it to the Hours field.
func (o *ExpenseResultInstance) SetHours(v int32) {
	o.Hours = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetFrom() time.Time {
	if o == nil || IsNil(o.From) {
		var ret time.Time
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given time.Time and assigns it to the From field.
func (o *ExpenseResultInstance) SetFrom(v time.Time) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetTo() time.Time {
	if o == nil || IsNil(o.To) {
		var ret time.Time
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given time.Time and assigns it to the To field.
func (o *ExpenseResultInstance) SetTo(v time.Time) {
	o.To = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *ExpenseResultInstance) SetPrice(v string) {
	o.Price = &v
}

func (o ExpenseResultInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseResultInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.ContractType) {
		toSerialize["contractType"] = o.ContractType
	}
	if !IsNil(o.ContractCreatedAt) {
		toSerialize["contractCreatedAt"] = o.ContractCreatedAt
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if !IsNil(o.ContractTerm) {
		toSerialize["contractTerm"] = o.ContractTerm
	}
	if !IsNil(o.BillingFrequency) {
		toSerialize["billingFrequency"] = o.BillingFrequency
	}
	if !IsNil(o.RootDiskSize) {
		toSerialize["rootDiskSize"] = o.RootDiskSize
	}
	if !IsNil(o.RootDiskType) {
		toSerialize["rootDiskType"] = o.RootDiskType
	}
	if !IsNil(o.BillingType) {
		toSerialize["billingType"] = o.BillingType
	}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullableExpenseResultInstance struct {
	value *ExpenseResultInstance
	isSet bool
}

func (v NullableExpenseResultInstance) Get() *ExpenseResultInstance {
	return v.value
}

func (v *NullableExpenseResultInstance) Set(val *ExpenseResultInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseResultInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseResultInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseResultInstance(val *ExpenseResultInstance) *NullableExpenseResultInstance {
	return &NullableExpenseResultInstance{value: val, isSet: true}
}

func (v NullableExpenseResultInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseResultInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


