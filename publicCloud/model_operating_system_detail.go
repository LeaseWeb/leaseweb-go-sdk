/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OperatingSystemDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperatingSystemDetail{}

// OperatingSystemDetail struct for OperatingSystemDetail
type OperatingSystemDetail struct {
	Id OperatingSystemId `json:"id"`
	Name string `json:"name"`
	Version string `json:"version"`
	Family string `json:"family"`
	Flavour string `json:"flavour"`
	Architecture string `json:"architecture"`
	MarketApps []string `json:"marketApps"`
	// The supported storage types for the instance type
	StorageTypes []string `json:"storageTypes"`
}

type _OperatingSystemDetail OperatingSystemDetail

// NewOperatingSystemDetail instantiates a new OperatingSystemDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatingSystemDetail(id OperatingSystemId, name string, version string, family string, flavour string, architecture string, marketApps []string, storageTypes []string) *OperatingSystemDetail {
	this := OperatingSystemDetail{}
	this.Id = id
	this.Name = name
	this.Version = version
	this.Family = family
	this.Flavour = flavour
	this.Architecture = architecture
	this.MarketApps = marketApps
	this.StorageTypes = storageTypes
	return &this
}

// NewOperatingSystemDetailWithDefaults instantiates a new OperatingSystemDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatingSystemDetailWithDefaults() *OperatingSystemDetail {
	this := OperatingSystemDetail{}
	return &this
}

// GetId returns the Id field value
func (o *OperatingSystemDetail) GetId() OperatingSystemId {
	if o == nil {
		var ret OperatingSystemId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OperatingSystemDetail) GetIdOk() (*OperatingSystemId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OperatingSystemDetail) SetId(v OperatingSystemId) {
	o.Id = v
}

// GetName returns the Name field value
func (o *OperatingSystemDetail) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OperatingSystemDetail) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OperatingSystemDetail) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *OperatingSystemDetail) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *OperatingSystemDetail) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *OperatingSystemDetail) SetVersion(v string) {
	o.Version = v
}

// GetFamily returns the Family field value
func (o *OperatingSystemDetail) GetFamily() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Family
}

// GetFamilyOk returns a tuple with the Family field value
// and a boolean to check if the value has been set.
func (o *OperatingSystemDetail) GetFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Family, true
}

// SetFamily sets field value
func (o *OperatingSystemDetail) SetFamily(v string) {
	o.Family = v
}

// GetFlavour returns the Flavour field value
func (o *OperatingSystemDetail) GetFlavour() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Flavour
}

// GetFlavourOk returns a tuple with the Flavour field value
// and a boolean to check if the value has been set.
func (o *OperatingSystemDetail) GetFlavourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flavour, true
}

// SetFlavour sets field value
func (o *OperatingSystemDetail) SetFlavour(v string) {
	o.Flavour = v
}

// GetArchitecture returns the Architecture field value
func (o *OperatingSystemDetail) GetArchitecture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
func (o *OperatingSystemDetail) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Architecture, true
}

// SetArchitecture sets field value
func (o *OperatingSystemDetail) SetArchitecture(v string) {
	o.Architecture = v
}

// GetMarketApps returns the MarketApps field value
func (o *OperatingSystemDetail) GetMarketApps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MarketApps
}

// GetMarketAppsOk returns a tuple with the MarketApps field value
// and a boolean to check if the value has been set.
func (o *OperatingSystemDetail) GetMarketAppsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarketApps, true
}

// SetMarketApps sets field value
func (o *OperatingSystemDetail) SetMarketApps(v []string) {
	o.MarketApps = v
}

// GetStorageTypes returns the StorageTypes field value
func (o *OperatingSystemDetail) GetStorageTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StorageTypes
}

// GetStorageTypesOk returns a tuple with the StorageTypes field value
// and a boolean to check if the value has been set.
func (o *OperatingSystemDetail) GetStorageTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageTypes, true
}

// SetStorageTypes sets field value
func (o *OperatingSystemDetail) SetStorageTypes(v []string) {
	o.StorageTypes = v
}

func (o OperatingSystemDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperatingSystemDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	toSerialize["family"] = o.Family
	toSerialize["flavour"] = o.Flavour
	toSerialize["architecture"] = o.Architecture
	toSerialize["marketApps"] = o.MarketApps
	toSerialize["storageTypes"] = o.StorageTypes
	return toSerialize, nil
}

func (o *OperatingSystemDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"version",
		"family",
		"flavour",
		"architecture",
		"marketApps",
		"storageTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOperatingSystemDetail := _OperatingSystemDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOperatingSystemDetail)

	if err != nil {
		return err
	}

	*o = OperatingSystemDetail(varOperatingSystemDetail)

	return err
}

type NullableOperatingSystemDetail struct {
	value *OperatingSystemDetail
	isSet bool
}

func (v NullableOperatingSystemDetail) Get() *OperatingSystemDetail {
	return v.value
}

func (v *NullableOperatingSystemDetail) Set(val *OperatingSystemDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatingSystemDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatingSystemDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatingSystemDetail(val *OperatingSystemDetail) *NullableOperatingSystemDetail {
	return &NullableOperatingSystemDetail{value: val, isSet: true}
}

func (v NullableOperatingSystemDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatingSystemDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


