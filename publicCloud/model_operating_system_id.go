/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
	"fmt"
)

// OperatingSystemId Operating System ID
type OperatingSystemId string

// List of operatingSystemId
const (
	ALMALINUX_8_64_BIT OperatingSystemId = "ALMALINUX_8_64BIT"
	ALMALINUX_9_64_BIT OperatingSystemId = "ALMALINUX_9_64BIT"
	ARCH_LINUX_64_BIT OperatingSystemId = "ARCH_LINUX_64BIT"
	CENTOS_7_64_BIT OperatingSystemId = "CENTOS_7_64BIT"
	DEBIAN_10_64_BIT OperatingSystemId = "DEBIAN_10_64BIT"
	DEBIAN_11_64_BIT OperatingSystemId = "DEBIAN_11_64BIT"
	DEBIAN_12_64_BIT OperatingSystemId = "DEBIAN_12_64BIT"
	FREEBSD_13_64_BIT OperatingSystemId = "FREEBSD_13_64BIT"
	FREEBSD_14_64_BIT OperatingSystemId = "FREEBSD_14_64BIT"
	ROCKY_LINUX_8_64_BIT OperatingSystemId = "ROCKY_LINUX_8_64BIT"
	ROCKY_LINUX_9_64_BIT OperatingSystemId = "ROCKY_LINUX_9_64BIT"
	UBUNTU_20_04_64_BIT OperatingSystemId = "UBUNTU_20_04_64BIT"
	UBUNTU_22_04_64_BIT OperatingSystemId = "UBUNTU_22_04_64BIT"
	UBUNTU_24_04_64_BIT OperatingSystemId = "UBUNTU_24_04_64BIT"
	WINDOWS_SERVER_2016_STANDARD_64_BIT OperatingSystemId = "WINDOWS_SERVER_2016_STANDARD_64BIT"
	WINDOWS_SERVER_2019_STANDARD_64_BIT OperatingSystemId = "WINDOWS_SERVER_2019_STANDARD_64BIT"
	WINDOWS_SERVER_2022_STANDARD_64_BIT OperatingSystemId = "WINDOWS_SERVER_2022_STANDARD_64BIT"
)

// All allowed values of OperatingSystemId enum
var AllowedOperatingSystemIdEnumValues = []OperatingSystemId{
	"ALMALINUX_8_64BIT",
	"ALMALINUX_9_64BIT",
	"ARCH_LINUX_64BIT",
	"CENTOS_7_64BIT",
	"DEBIAN_10_64BIT",
	"DEBIAN_11_64BIT",
	"DEBIAN_12_64BIT",
	"FREEBSD_13_64BIT",
	"FREEBSD_14_64BIT",
	"ROCKY_LINUX_8_64BIT",
	"ROCKY_LINUX_9_64BIT",
	"UBUNTU_20_04_64BIT",
	"UBUNTU_22_04_64BIT",
	"UBUNTU_24_04_64BIT",
	"WINDOWS_SERVER_2016_STANDARD_64BIT",
	"WINDOWS_SERVER_2019_STANDARD_64BIT",
	"WINDOWS_SERVER_2022_STANDARD_64BIT",
}

func (v *OperatingSystemId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OperatingSystemId(value)
	for _, existing := range AllowedOperatingSystemIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OperatingSystemId", value)
}

// NewOperatingSystemIdFromValue returns a pointer to a valid OperatingSystemId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperatingSystemIdFromValue(v string) (*OperatingSystemId, error) {
	ev := OperatingSystemId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OperatingSystemId: valid values are %v", v, AllowedOperatingSystemIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperatingSystemId) IsValid() bool {
	for _, existing := range AllowedOperatingSystemIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to operatingSystemId value
func (v OperatingSystemId) Ptr() *OperatingSystemId {
	return &v
}

type NullableOperatingSystemId struct {
	value *OperatingSystemId
	isSet bool
}

func (v NullableOperatingSystemId) Get() *OperatingSystemId {
	return v.value
}

func (v *NullableOperatingSystemId) Set(val *OperatingSystemId) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatingSystemId) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatingSystemId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatingSystemId(val *OperatingSystemId) *NullableOperatingSystemId {
	return &NullableOperatingSystemId{value: val, isSet: true}
}

func (v NullableOperatingSystemId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatingSystemId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

