/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the GetIpListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIpListResult{}

// GetIpListResult struct for GetIpListResult
type GetIpListResult struct {
	Ips []IpDetails `json:"ips,omitempty"`
	Metadata *Metadata `json:"_metadata,omitempty"`
}

// NewGetIpListResult instantiates a new GetIpListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIpListResult() *GetIpListResult {
	this := GetIpListResult{}
	return &this
}

// NewGetIpListResultWithDefaults instantiates a new GetIpListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIpListResultWithDefaults() *GetIpListResult {
	this := GetIpListResult{}
	return &this
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *GetIpListResult) GetIps() []IpDetails {
	if o == nil || IsNil(o.Ips) {
		var ret []IpDetails
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIpListResult) GetIpsOk() ([]IpDetails, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *GetIpListResult) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []IpDetails and assigns it to the Ips field.
func (o *GetIpListResult) SetIps(v []IpDetails) {
	o.Ips = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetIpListResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIpListResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetIpListResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetIpListResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

func (o GetIpListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIpListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableGetIpListResult struct {
	value *GetIpListResult
	isSet bool
}

func (v NullableGetIpListResult) Get() *GetIpListResult {
	return v.value
}

func (v *NullableGetIpListResult) Set(val *GetIpListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpListResult(val *GetIpListResult) *NullableGetIpListResult {
	return &NullableGetIpListResult{value: val, isSet: true}
}

func (v NullableGetIpListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


