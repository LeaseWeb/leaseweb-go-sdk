/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the StickySession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StickySession{}

// StickySession struct for StickySession
type StickySession struct {
	// If sticky session is enabled or not
	Enabled *bool `json:"enabled,omitempty"`
	// Time that the Load Balancer routes the requests from one requester to the same target instance
	MaxLifeTime *int32 `json:"maxLifeTime,omitempty"`
}

// NewStickySession instantiates a new StickySession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStickySession() *StickySession {
	this := StickySession{}
	return &this
}

// NewStickySessionWithDefaults instantiates a new StickySession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStickySessionWithDefaults() *StickySession {
	this := StickySession{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StickySession) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StickySession) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StickySession) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StickySession) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMaxLifeTime returns the MaxLifeTime field value if set, zero value otherwise.
func (o *StickySession) GetMaxLifeTime() int32 {
	if o == nil || IsNil(o.MaxLifeTime) {
		var ret int32
		return ret
	}
	return *o.MaxLifeTime
}

// GetMaxLifeTimeOk returns a tuple with the MaxLifeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StickySession) GetMaxLifeTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLifeTime) {
		return nil, false
	}
	return o.MaxLifeTime, true
}

// HasMaxLifeTime returns a boolean if a field has been set.
func (o *StickySession) HasMaxLifeTime() bool {
	if o != nil && !IsNil(o.MaxLifeTime) {
		return true
	}

	return false
}

// SetMaxLifeTime gets a reference to the given int32 and assigns it to the MaxLifeTime field.
func (o *StickySession) SetMaxLifeTime(v int32) {
	o.MaxLifeTime = &v
}

func (o StickySession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StickySession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MaxLifeTime) {
		toSerialize["maxLifeTime"] = o.MaxLifeTime
	}
	return toSerialize, nil
}

type NullableStickySession struct {
	value *StickySession
	isSet bool
}

func (v NullableStickySession) Get() *StickySession {
	return v.value
}

func (v *NullableStickySession) Set(val *StickySession) {
	v.value = val
	v.isSet = true
}

func (v NullableStickySession) IsSet() bool {
	return v.isSet
}

func (v *NullableStickySession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStickySession(val *StickySession) *NullableStickySession {
	return &NullableStickySession{value: val, isSet: true}
}

func (v NullableStickySession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStickySession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


