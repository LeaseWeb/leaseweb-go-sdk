/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publicCloud

import (
	"encoding/json"
)

// checks if the HealthCheckStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthCheckStatus{}

// HealthCheckStatus struct for HealthCheckStatus
type HealthCheckStatus struct {
	CheckStatus *string `json:"checkStatus,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewHealthCheckStatus instantiates a new HealthCheckStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthCheckStatus() *HealthCheckStatus {
	this := HealthCheckStatus{}
	return &this
}

// NewHealthCheckStatusWithDefaults instantiates a new HealthCheckStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthCheckStatusWithDefaults() *HealthCheckStatus {
	this := HealthCheckStatus{}
	return &this
}

// GetCheckStatus returns the CheckStatus field value if set, zero value otherwise.
func (o *HealthCheckStatus) GetCheckStatus() string {
	if o == nil || IsNil(o.CheckStatus) {
		var ret string
		return ret
	}
	return *o.CheckStatus
}

// GetCheckStatusOk returns a tuple with the CheckStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckStatus) GetCheckStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CheckStatus) {
		return nil, false
	}
	return o.CheckStatus, true
}

// HasCheckStatus returns a boolean if a field has been set.
func (o *HealthCheckStatus) HasCheckStatus() bool {
	if o != nil && !IsNil(o.CheckStatus) {
		return true
	}

	return false
}

// SetCheckStatus gets a reference to the given string and assigns it to the CheckStatus field.
func (o *HealthCheckStatus) SetCheckStatus(v string) {
	o.CheckStatus = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HealthCheckStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HealthCheckStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HealthCheckStatus) SetStatus(v string) {
	o.Status = &v
}

func (o HealthCheckStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthCheckStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckStatus) {
		toSerialize["checkStatus"] = o.CheckStatus
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableHealthCheckStatus struct {
	value *HealthCheckStatus
	isSet bool
}

func (v NullableHealthCheckStatus) Get() *HealthCheckStatus {
	return v.value
}

func (v *NullableHealthCheckStatus) Set(val *HealthCheckStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthCheckStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthCheckStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthCheckStatus(val *HealthCheckStatus) *NullableHealthCheckStatus {
	return &NullableHealthCheckStatus{value: val, isSet: true}
}

func (v NullableHealthCheckStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthCheckStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


