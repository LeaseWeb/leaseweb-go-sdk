/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the IpList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpList{}

// IpList struct for IpList
type IpList struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// An array of IP addresses
	Ips []Ip `json:"ips,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IpList IpList

// NewIpList instantiates a new IpList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpList() *IpList {
	this := IpList{}
	return &this
}

// NewIpListWithDefaults instantiates a new IpList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpListWithDefaults() *IpList {
	this := IpList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IpList) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpList) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IpList) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *IpList) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *IpList) GetIps() []Ip {
	if o == nil || IsNil(o.Ips) {
		var ret []Ip
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpList) GetIpsOk() ([]Ip, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *IpList) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []Ip and assigns it to the Ips field.
func (o *IpList) SetIps(v []Ip) {
	o.Ips = v
}

func (o IpList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IpList) UnmarshalJSON(data []byte) (err error) {
	varIpList := _IpList{}

	err = json.Unmarshal(data, &varIpList)

	if err != nil {
		return err
	}

	*o = IpList(varIpList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "ips")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpList struct {
	value *IpList
	isSet bool
}

func (v NullableIpList) Get() *IpList {
	return v.value
}

func (v *NullableIpList) Set(val *IpList) {
	v.value = val
	v.isSet = true
}

func (v NullableIpList) IsSet() bool {
	return v.isSet
}

func (v *NullableIpList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpList(val *IpList) *NullableIpList {
	return &NullableIpList{value: val, isSet: true}
}

func (v NullableIpList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


