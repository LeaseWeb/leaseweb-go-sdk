/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// JobPayload - struct for JobPayload
type JobPayload struct {
	InstallOperatingSystemPayload *InstallOperatingSystemPayload
	Payload *Payload
}

// InstallOperatingSystemPayloadAsJobPayload is a convenience function that returns InstallOperatingSystemPayload wrapped in JobPayload
func InstallOperatingSystemPayloadAsJobPayload(v *InstallOperatingSystemPayload) JobPayload {
	return JobPayload{
		InstallOperatingSystemPayload: v,
	}
}

// PayloadAsJobPayload is a convenience function that returns Payload wrapped in JobPayload
func PayloadAsJobPayload(v *Payload) JobPayload {
	return JobPayload{
		Payload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JobPayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InstallOperatingSystemPayload
	err = newStrictDecoder(data).Decode(&dst.InstallOperatingSystemPayload)
	if err == nil {
		jsonInstallOperatingSystemPayload, _ := json.Marshal(dst.InstallOperatingSystemPayload)
		if string(jsonInstallOperatingSystemPayload) == "{}" { // empty struct
			dst.InstallOperatingSystemPayload = nil
		} else {
			if err = validator.Validate(dst.InstallOperatingSystemPayload); err != nil {
				dst.InstallOperatingSystemPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.InstallOperatingSystemPayload = nil
	}

	// try to unmarshal data into Payload
	err = newStrictDecoder(data).Decode(&dst.Payload)
	if err == nil {
		jsonPayload, _ := json.Marshal(dst.Payload)
		if string(jsonPayload) == "{}" { // empty struct
			dst.Payload = nil
		} else {
			if err = validator.Validate(dst.Payload); err != nil {
				dst.Payload = nil
			} else {
				match++
			}
		}
	} else {
		dst.Payload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InstallOperatingSystemPayload = nil
		dst.Payload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JobPayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JobPayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JobPayload) MarshalJSON() ([]byte, error) {
	if src.InstallOperatingSystemPayload != nil {
		return json.Marshal(&src.InstallOperatingSystemPayload)
	}

	if src.Payload != nil {
		return json.Marshal(&src.Payload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JobPayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InstallOperatingSystemPayload != nil {
		return obj.InstallOperatingSystemPayload
	}

	if obj.Payload != nil {
		return obj.Payload
	}

	// all schemas are nil
	return nil
}

type NullableJobPayload struct {
	value *JobPayload
	isSet bool
}

func (v NullableJobPayload) Get() *JobPayload {
	return v.value
}

func (v *NullableJobPayload) Set(val *JobPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableJobPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableJobPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobPayload(val *JobPayload) *NullableJobPayload {
	return &NullableJobPayload{value: val, isSet: true}
}

func (v NullableJobPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


