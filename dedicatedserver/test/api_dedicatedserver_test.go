/*
Leaseweb API for dedicated servers

Testing DedicatedserverAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dedicatedserver

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/dedicatedserver"
)

func Test_dedicatedserver_DedicatedserverAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DedicatedserverAPIService AddServerToPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var privateNetworkId string

		httpRes, err := apiClient.DedicatedserverAPI.AddServerToPrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteServerFromPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var privateNetworkId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteServerFromPrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipment(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentIp(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentIpList(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentNullRouteHistory(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerIp(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerIpList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerNullRouteHistory(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService NetworkEquipmentsIpsNull", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.NetworkEquipmentsIpsNull(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService NullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.NullIpRoute(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PutServerIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.PutServerIp(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService RemoveNullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.RemoveNullIpRoute(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UnNullNetworkEquipmentIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UnNullNetworkEquipmentIpRoute(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateNetworkEquipmentIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateNetworkEquipmentIp(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateNetworkEquipmentReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedserverAPI.UpdateNetworkEquipmentReference(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateServerReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.UpdateServerReference(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
