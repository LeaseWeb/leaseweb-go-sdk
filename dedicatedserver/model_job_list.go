/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the JobList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobList{}

// JobList struct for JobList
type JobList struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// An array of jobs
	Jobs []Job `json:"jobs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobList JobList

// NewJobList instantiates a new JobList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobList() *JobList {
	this := JobList{}
	return &this
}

// NewJobListWithDefaults instantiates a new JobList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobListWithDefaults() *JobList {
	this := JobList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *JobList) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobList) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *JobList) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *JobList) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *JobList) GetJobs() []Job {
	if o == nil || IsNil(o.Jobs) {
		var ret []Job
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobList) GetJobsOk() ([]Job, bool) {
	if o == nil || IsNil(o.Jobs) {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *JobList) HasJobs() bool {
	if o != nil && !IsNil(o.Jobs) {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []Job and assigns it to the Jobs field.
func (o *JobList) SetJobs(v []Job) {
	o.Jobs = v
}

func (o JobList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.Jobs) {
		toSerialize["jobs"] = o.Jobs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobList) UnmarshalJSON(data []byte) (err error) {
	varJobList := _JobList{}

	err = json.Unmarshal(data, &varJobList)

	if err != nil {
		return err
	}

	*o = JobList(varJobList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "jobs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobList struct {
	value *JobList
	isSet bool
}

func (v NullableJobList) Get() *JobList {
	return v.value
}

func (v *NullableJobList) Set(val *JobList) {
	v.value = val
	v.isSet = true
}

func (v NullableJobList) IsSet() bool {
	return v.isSet
}

func (v *NullableJobList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobList(val *JobList) *NullableJobList {
	return &NullableJobList{value: val, isSet: true}
}

func (v NullableJobList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


