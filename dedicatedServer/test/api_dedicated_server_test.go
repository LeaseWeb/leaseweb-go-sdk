/*
Leaseweb API for dedicated servers

Testing DedicatedServerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dedicatedServer

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/dedicatedServer"
)

func Test_dedicatedServer_DedicatedServerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DedicatedServerAPIService AddServerToPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var privateNetworkId string

		httpRes, err := apiClient.DedicatedServerAPI.AddServerToPrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService CancelActiveJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.CancelActiveJob(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService CloseNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkType NetworkType

		httpRes, err := apiClient.DedicatedServerAPI.CloseNetworkInterface(context.Background(), serverId, networkType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService CloseNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.CloseNetworkInterfaces(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService CreateNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.CreateNetworkEquipmentCredential(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService CreateServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.CreateServerBandwidthNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService CreateServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.CreateServerCredential(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService CreateServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.CreateServerDataTrafficNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService CreateServerDhcpReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.CreateServerDhcpReservation(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService DeleteNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		httpRes, err := apiClient.DedicatedServerAPI.DeleteNetworkEquipmentCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService DeleteServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		httpRes, err := apiClient.DedicatedServerAPI.DeleteServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService DeleteServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		httpRes, err := apiClient.DedicatedServerAPI.DeleteServerCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService DeleteServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		httpRes, err := apiClient.DedicatedServerAPI.DeleteServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService DeleteServerDhcpReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.DeleteServerDhcpReservation(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService DeleteServerFromPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var privateNetworkId string

		httpRes, err := apiClient.DedicatedServerAPI.DeleteServerFromPrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService EnableServerRescueMode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.EnableServerRescueMode(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService ExpireActiveJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.ExpireActiveJob(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetControlPanelList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetControlPanelList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetControlPanelListByOperatingSystemId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingSystemId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetControlPanelListByOperatingSystemId(context.Background(), operatingSystemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetDdosNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetDdosNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipment(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipmentCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipmentCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipmentCredentialList(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipmentCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipmentCredentialListByType(context.Background(), networkEquipmentId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipmentIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipmentIp(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipmentIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipmentIpList(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipmentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipmentList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipmentNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipmentNullRouteHistory(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkEquipmentPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkEquipmentPowerStatus(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkType NetworkType

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkInterface(context.Background(), serverId, networkType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetNetworkInterfaceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetNetworkInterfaceList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingSystemId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetOperatingSystem(context.Background(), operatingSystemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetOperatingSystemList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetOperatingSystemList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetRescueImageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetRescueImageList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerBandwidthMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerBandwidthMetrics(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerBandwidthNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerBandwidthNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerCredentialList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerCredentialListByType(context.Background(), serverId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerDataTrafficMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerDataTrafficMetrics(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerDataTrafficNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerDataTrafficNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerDhcpReservationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerDhcpReservationList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerHardware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerHardware(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerIp(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerIpList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var jobId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerJob(context.Background(), serverId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerJobList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerJobList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerNullRouteHistory(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService GetServerPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.GetServerPowerStatus(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService InstallOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.InstallOperatingSystem(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService IpmiResetServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.IpmiResetServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService NullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedServerAPI.NullIpRoute(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService NullNetworkEquipmentIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedServerAPI.NullNetworkEquipmentIpRoute(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService OpenNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkType NetworkType

		httpRes, err := apiClient.DedicatedServerAPI.OpenNetworkInterface(context.Background(), serverId, networkType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService OpenNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.OpenNetworkInterfaces(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService PowerCycleNetworkEquipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedServerAPI.PowerCycleNetworkEquipment(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService PowerCycleServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.PowerCycleServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService PowerNetworkEquipmentOff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedServerAPI.PowerNetworkEquipmentOff(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService PowerNetworkEquipmentOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedServerAPI.PowerNetworkEquipmentOn(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService PowerServerOff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.PowerServerOff(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService PowerServerOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.PowerServerOn(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService RemoveNullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedServerAPI.RemoveNullIpRoute(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService RetryServerJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var jobId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.RetryServerJob(context.Background(), serverId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService ScanHardware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.ScanHardware(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UnNullNetworkEquipmentIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedServerAPI.UnNullNetworkEquipmentIpRoute(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateDdosNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.UpdateDdosNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateIpProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedServerAPI.UpdateIpProfile(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedServerAPI.UpdateNetworkEquipmentCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateNetworkEquipmentIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedServerAPI.UpdateNetworkEquipmentIp(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateNetworkEquipmentReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedServerAPI.UpdateNetworkEquipmentReference(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.UpdateServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedServerAPI.UpdateServerCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedServerAPI.UpdateServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedServerAPIService UpdateServerReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedServerAPI.UpdateServerReference(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
