/*
LeaseWeb API for IP address management

> The base URL for this API is: **https://api.leaseweb.com/ipMgmt/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipmgmt

import (
	"encoding/json"
	"fmt"
)

// checks if the Subnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subnet{}

// Subnet Object containing information about the network and gateway
type Subnet struct {
	// Subnet identifier consisting of network IP and prefix length separated by underscore (e.g. 192.0.2.0_24)
	Id string `json:"id"`
	// Network IP of the subnet
	NetworkIp string `json:"networkIp"`
	// Address prefix length
	PrefixLength int32 `json:"prefixLength"`
	// The gateway IP to be used in network settings
	Gateway string `json:"gateway"`
	AdditionalProperties map[string]interface{}
}

type _Subnet Subnet

// NewSubnet instantiates a new Subnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnet(id string, networkIp string, prefixLength int32, gateway string) *Subnet {
	this := Subnet{}
	this.Id = id
	this.NetworkIp = networkIp
	this.PrefixLength = prefixLength
	this.Gateway = gateway
	return &this
}

// NewSubnetWithDefaults instantiates a new Subnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetWithDefaults() *Subnet {
	this := Subnet{}
	var prefixLength int32 = 0
	this.PrefixLength = prefixLength
	return &this
}

// GetId returns the Id field value
func (o *Subnet) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Subnet) SetId(v string) {
	o.Id = v
}

// GetNetworkIp returns the NetworkIp field value
func (o *Subnet) GetNetworkIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkIp
}

// GetNetworkIpOk returns a tuple with the NetworkIp field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetworkIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkIp, true
}

// SetNetworkIp sets field value
func (o *Subnet) SetNetworkIp(v string) {
	o.NetworkIp = v
}

// GetPrefixLength returns the PrefixLength field value
func (o *Subnet) GetPrefixLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetPrefixLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *Subnet) SetPrefixLength(v int32) {
	o.PrefixLength = v
}

// GetGateway returns the Gateway field value
func (o *Subnet) GetGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gateway, true
}

// SetGateway sets field value
func (o *Subnet) SetGateway(v string) {
	o.Gateway = v
}

func (o Subnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["networkIp"] = o.NetworkIp
	toSerialize["prefixLength"] = o.PrefixLength
	toSerialize["gateway"] = o.Gateway

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Subnet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"networkIp",
		"prefixLength",
		"gateway",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubnet := _Subnet{}

	err = json.Unmarshal(data, &varSubnet)

	if err != nil {
		return err
	}

	*o = Subnet(varSubnet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "networkIp")
		delete(additionalProperties, "prefixLength")
		delete(additionalProperties, "gateway")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubnet struct {
	value *Subnet
	isSet bool
}

func (v NullableSubnet) Get() *Subnet {
	return v.value
}

func (v *NullableSubnet) Set(val *Subnet) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnet(val *Subnet) *NullableSubnet {
	return &NullableSubnet{value: val, isSet: true}
}

func (v NullableSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


