/*
IP management

> The base URL for this API is: **https://api.leaseweb.com/ipMgmt/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipmgmt

import (
	"encoding/json"
	"fmt"
)

// checks if the ReverseLookup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReverseLookup{}

// ReverseLookup Reverse lookup set for a specific IP address
type ReverseLookup struct {
	// IP address
	Ip string `json:"ip"`
	// Reverse lookup value
	ReverseLookup NullableString `json:"reverseLookup"`
	AdditionalProperties map[string]interface{}
}

type _ReverseLookup ReverseLookup

// NewReverseLookup instantiates a new ReverseLookup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReverseLookup(ip string, reverseLookup NullableString) *ReverseLookup {
	this := ReverseLookup{}
	this.Ip = ip
	this.ReverseLookup = reverseLookup
	return &this
}

// NewReverseLookupWithDefaults instantiates a new ReverseLookup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReverseLookupWithDefaults() *ReverseLookup {
	this := ReverseLookup{}
	return &this
}

// GetIp returns the Ip field value
func (o *ReverseLookup) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *ReverseLookup) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *ReverseLookup) SetIp(v string) {
	o.Ip = v
}

// GetReverseLookup returns the ReverseLookup field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ReverseLookup) GetReverseLookup() string {
	if o == nil || o.ReverseLookup.Get() == nil {
		var ret string
		return ret
	}

	return *o.ReverseLookup.Get()
}

// GetReverseLookupOk returns a tuple with the ReverseLookup field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReverseLookup) GetReverseLookupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReverseLookup.Get(), o.ReverseLookup.IsSet()
}

// SetReverseLookup sets field value
func (o *ReverseLookup) SetReverseLookup(v string) {
	o.ReverseLookup.Set(&v)
}

func (o ReverseLookup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReverseLookup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	toSerialize["reverseLookup"] = o.ReverseLookup.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReverseLookup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
		"reverseLookup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReverseLookup := _ReverseLookup{}

	err = json.Unmarshal(data, &varReverseLookup)

	if err != nil {
		return err
	}

	*o = ReverseLookup(varReverseLookup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		delete(additionalProperties, "reverseLookup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReverseLookup struct {
	value *ReverseLookup
	isSet bool
}

func (v NullableReverseLookup) Get() *ReverseLookup {
	return v.value
}

func (v *NullableReverseLookup) Set(val *ReverseLookup) {
	v.value = val
	v.isSet = true
}

func (v NullableReverseLookup) IsSet() bool {
	return v.isSet
}

func (v *NullableReverseLookup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReverseLookup(val *ReverseLookup) *NullableReverseLookup {
	return &NullableReverseLookup{value: val, isSet: true}
}

func (v NullableReverseLookup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReverseLookup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


