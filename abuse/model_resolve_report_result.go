/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResolveReportResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolveReportResult{}

// ResolveReportResult struct for ResolveReportResult
type ResolveReportResult struct {
	// List of selected resolution ID's to explain how the report is resolved.
	Resolutions []string `json:"resolutions"`
}

type _ResolveReportResult ResolveReportResult

// NewResolveReportResult instantiates a new ResolveReportResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolveReportResult(resolutions []string) *ResolveReportResult {
	this := ResolveReportResult{}
	this.Resolutions = resolutions
	return &this
}

// NewResolveReportResultWithDefaults instantiates a new ResolveReportResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolveReportResultWithDefaults() *ResolveReportResult {
	this := ResolveReportResult{}
	return &this
}

// GetResolutions returns the Resolutions field value
func (o *ResolveReportResult) GetResolutions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Resolutions
}

// GetResolutionsOk returns a tuple with the Resolutions field value
// and a boolean to check if the value has been set.
func (o *ResolveReportResult) GetResolutionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resolutions, true
}

// SetResolutions sets field value
func (o *ResolveReportResult) SetResolutions(v []string) {
	o.Resolutions = v
}

func (o ResolveReportResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolveReportResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resolutions"] = o.Resolutions
	return toSerialize, nil
}

func (o *ResolveReportResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resolutions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResolveReportResult := _ResolveReportResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResolveReportResult)

	if err != nil {
		return err
	}

	*o = ResolveReportResult(varResolveReportResult)

	return err
}

type NullableResolveReportResult struct {
	value *ResolveReportResult
	isSet bool
}

func (v NullableResolveReportResult) Get() *ResolveReportResult {
	return v.value
}

func (v *NullableResolveReportResult) Set(val *ResolveReportResult) {
	v.value = val
	v.isSet = true
}

func (v NullableResolveReportResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResolveReportResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolveReportResult(val *ResolveReportResult) *NullableResolveReportResult {
	return &NullableResolveReportResult{value: val, isSet: true}
}

func (v NullableResolveReportResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolveReportResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


