/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
)

// checks if the ResolutionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolutionList{}

// ResolutionList struct for ResolutionList
type ResolutionList struct {
	// The resolution ID to be used when calling /resolve.
	Id *string `json:"id,omitempty"`
	// The actual text the report will be resolved with when resolving with this resolution.
	Description *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResolutionList ResolutionList

// NewResolutionList instantiates a new ResolutionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolutionList() *ResolutionList {
	this := ResolutionList{}
	return &this
}

// NewResolutionListWithDefaults instantiates a new ResolutionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolutionListWithDefaults() *ResolutionList {
	this := ResolutionList{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResolutionList) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolutionList) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResolutionList) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResolutionList) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResolutionList) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolutionList) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResolutionList) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResolutionList) SetDescription(v string) {
	o.Description = &v
}

func (o ResolutionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolutionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResolutionList) UnmarshalJSON(data []byte) (err error) {
	varResolutionList := _ResolutionList{}

	err = json.Unmarshal(data, &varResolutionList)

	if err != nil {
		return err
	}

	*o = ResolutionList(varResolutionList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResolutionList struct {
	value *ResolutionList
	isSet bool
}

func (v NullableResolutionList) Get() *ResolutionList {
	return v.value
}

func (v *NullableResolutionList) Set(val *ResolutionList) {
	v.value = val
	v.isSet = true
}

func (v NullableResolutionList) IsSet() bool {
	return v.isSet
}

func (v *NullableResolutionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolutionList(val *ResolutionList) *NullableResolutionList {
	return &NullableResolutionList{value: val, isSet: true}
}

func (v NullableResolutionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolutionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


