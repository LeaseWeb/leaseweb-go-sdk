/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
)

// checks if the GetReportResolutionListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetReportResolutionListResult{}

// GetReportResolutionListResult struct for GetReportResolutionListResult
type GetReportResolutionListResult struct {
	// Possible resolutions to resolve this report with.
	Resolutions []ResolutionList `json:"resolutions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetReportResolutionListResult GetReportResolutionListResult

// NewGetReportResolutionListResult instantiates a new GetReportResolutionListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetReportResolutionListResult() *GetReportResolutionListResult {
	this := GetReportResolutionListResult{}
	return &this
}

// NewGetReportResolutionListResultWithDefaults instantiates a new GetReportResolutionListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetReportResolutionListResultWithDefaults() *GetReportResolutionListResult {
	this := GetReportResolutionListResult{}
	return &this
}

// GetResolutions returns the Resolutions field value if set, zero value otherwise.
func (o *GetReportResolutionListResult) GetResolutions() []ResolutionList {
	if o == nil || IsNil(o.Resolutions) {
		var ret []ResolutionList
		return ret
	}
	return o.Resolutions
}

// GetResolutionsOk returns a tuple with the Resolutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResolutionListResult) GetResolutionsOk() ([]ResolutionList, bool) {
	if o == nil || IsNil(o.Resolutions) {
		return nil, false
	}
	return o.Resolutions, true
}

// HasResolutions returns a boolean if a field has been set.
func (o *GetReportResolutionListResult) HasResolutions() bool {
	if o != nil && !IsNil(o.Resolutions) {
		return true
	}

	return false
}

// SetResolutions gets a reference to the given []ResolutionList and assigns it to the Resolutions field.
func (o *GetReportResolutionListResult) SetResolutions(v []ResolutionList) {
	o.Resolutions = v
}

func (o GetReportResolutionListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetReportResolutionListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resolutions) {
		toSerialize["resolutions"] = o.Resolutions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetReportResolutionListResult) UnmarshalJSON(data []byte) (err error) {
	varGetReportResolutionListResult := _GetReportResolutionListResult{}

	err = json.Unmarshal(data, &varGetReportResolutionListResult)

	if err != nil {
		return err
	}

	*o = GetReportResolutionListResult(varGetReportResolutionListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resolutions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetReportResolutionListResult struct {
	value *GetReportResolutionListResult
	isSet bool
}

func (v NullableGetReportResolutionListResult) Get() *GetReportResolutionListResult {
	return v.value
}

func (v *NullableGetReportResolutionListResult) Set(val *GetReportResolutionListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetReportResolutionListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetReportResolutionListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetReportResolutionListResult(val *GetReportResolutionListResult) *NullableGetReportResolutionListResult {
	return &NullableGetReportResolutionListResult{value: val, isSet: true}
}

func (v NullableGetReportResolutionListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetReportResolutionListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


