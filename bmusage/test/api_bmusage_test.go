/*
bmusage

Testing BmusageAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bmusage

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/bmusage"
)

func Test_bmusage_BmusageAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BmusageAPIService CreateServerBandwidthNotificationSettingJson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmusageAPI.CreateServerBandwidthNotificationSettingJson(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService CreateServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmusageAPI.CreateServerDataTrafficNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService DeleteServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		httpRes, err := apiClient.BmusageAPI.DeleteServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService DeleteServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		httpRes, err := apiClient.BmusageAPI.DeleteServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService GetServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.BmusageAPI.GetServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService GetServerBandwidthNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmusageAPI.GetServerBandwidthNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService GetServerDataTrafficMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmusageAPI.GetServerDataTrafficMetrics(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService GetServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.BmusageAPI.GetServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService GetServerDataTrafficNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmusageAPI.GetServerDataTrafficNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService ServersMetricsBandwidth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.BmusageAPI.ServersMetricsBandwidth(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService UpdateServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.BmusageAPI.UpdateServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BmusageAPIService UpdateServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.BmusageAPI.UpdateServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
