/*
nse

This documents the rest api nse api provides.

API version: v2
Contact: development-networkautomation@leaseweb.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nse

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateNullRouteOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNullRouteOpts{}

// UpdateNullRouteOpts struct for UpdateNullRouteOpts
type UpdateNullRouteOpts struct {
	// The action to take
	Action string `json:"action"`
	// The IP address for which to announce or withdraw the null route
	IpAddress string `json:"ipAddress"`
}

type _UpdateNullRouteOpts UpdateNullRouteOpts

// NewUpdateNullRouteOpts instantiates a new UpdateNullRouteOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNullRouteOpts(action string, ipAddress string) *UpdateNullRouteOpts {
	this := UpdateNullRouteOpts{}
	this.Action = action
	this.IpAddress = ipAddress
	return &this
}

// NewUpdateNullRouteOptsWithDefaults instantiates a new UpdateNullRouteOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNullRouteOptsWithDefaults() *UpdateNullRouteOpts {
	this := UpdateNullRouteOpts{}
	return &this
}

// GetAction returns the Action field value
func (o *UpdateNullRouteOpts) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *UpdateNullRouteOpts) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *UpdateNullRouteOpts) SetAction(v string) {
	o.Action = v
}

// GetIpAddress returns the IpAddress field value
func (o *UpdateNullRouteOpts) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *UpdateNullRouteOpts) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *UpdateNullRouteOpts) SetIpAddress(v string) {
	o.IpAddress = v
}

func (o UpdateNullRouteOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNullRouteOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["ipAddress"] = o.IpAddress
	return toSerialize, nil
}

func (o *UpdateNullRouteOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"ipAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateNullRouteOpts := _UpdateNullRouteOpts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateNullRouteOpts)

	if err != nil {
		return err
	}

	*o = UpdateNullRouteOpts(varUpdateNullRouteOpts)

	return err
}

type NullableUpdateNullRouteOpts struct {
	value *UpdateNullRouteOpts
	isSet bool
}

func (v NullableUpdateNullRouteOpts) Get() *UpdateNullRouteOpts {
	return v.value
}

func (v *NullableUpdateNullRouteOpts) Set(val *UpdateNullRouteOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNullRouteOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNullRouteOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNullRouteOpts(val *UpdateNullRouteOpts) *NullableUpdateNullRouteOpts {
	return &NullableUpdateNullRouteOpts{value: val, isSet: true}
}

func (v NullableUpdateNullRouteOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNullRouteOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


