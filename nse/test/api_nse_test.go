/*
nse

Testing NseAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package nse

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/nse"
)

func Test_nse_NseAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NseAPIService CloseNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkType string

		httpRes, err := apiClient.NseAPI.CloseNetworkInterface(context.Background(), serverId, networkType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NseAPIService CloseNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.NseAPI.CloseNetworkInterfaces(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NseAPIService GetDdosNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.NseAPI.GetDdosNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NseAPIService GetNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkType string

		resp, httpRes, err := apiClient.NseAPI.GetNetworkInterface(context.Background(), serverId, networkType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NseAPIService GetNetworkInterfaceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.NseAPI.GetNetworkInterfaceList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NseAPIService OpenNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkType string

		httpRes, err := apiClient.NseAPI.OpenNetworkInterface(context.Background(), serverId, networkType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NseAPIService OpenNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.NseAPI.OpenNetworkInterfaces(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NseAPIService UpdateNullRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NseAPI.UpdateNullRoute(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NseAPIService UpdateServerDdosNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.NseAPI.UpdateServerDdosNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
